---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: celery-bc
  creationTimestamp:
parameters:
  - name: NAME
    displayName:
    description: the module name entered when run yo bcdk:pipeline, which is tfrs
    required: true
  - name: SUFFIX
    displayName:
    description: sample is -pr-0
    required: true
  - name: VERSION
    displayName:
    description: image tag name for output
    required: true
  - name: GIT_URL
    displayName:
    description: tfrs repo
    required: true
  - name: RELEASE_BRANCH
    displayName:
    description: the release branch name
    required: true
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the celery image
      labels:
        shared: "true"
      creationTimestamp: null
      name: ${NAME}-celery
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${NAME}-celery${SUFFIX}
      creationTimestamp:
    spec:
      triggers: []
      runPolicy: Serial
      source:
        type: Dockerfile
        dockerfile: |
          FROM artifacts.developer.gov.bc.ca/docker-remote/python:3.6.8-slim-stretch
          ENV TFRS_RELEASE=${tfrs_release}
          RUN apt-get update \
              && apt-get install -y git \
              && apt-get install -y supervisor
          WORKDIR /app
          RUN git clone https://github.com/bcgov/tfrs.git
          WORKDIR /app/tfrs
          RUN git checkout $TFRS_RELEASE
          RUN pip install --upgrade pip \
              && pip install -r backend/requirements.txt
          RUN cp /app/tfrs/security-scan/scan-handler/celery.conf /etc/supervisor/conf.d
          RUN chgrp -R root /var/log/supervisor
          RUN chmod -R g+w /var/log/supervisor
          RUN chmod -R g+w /run || :
          RUN chmod -R g+w /app
          CMD ["supervisord"]
      strategy:
        type: Docker
        dockerStrategy:
          pullSecret:
            name: docker-artifactory-secret
          noCache: true
          env:
            - name: tfrs_release
              value: ${RELEASE_BRANCH}
          forcePull: true
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}-celery:${VERSION}
      resources: {}
      postCommit: {}
      nodeSelector:
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
    status:
      lastVersion: 0
