---
kind: Template
apiVersion: v1
labels:
  template: tfrs-postgresql-persistent-template
metadata:
  name: postgresql-dc
  creationTimestamp:
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: postgresql
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql10
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: postgresql10
    annotations:
      volume.beta.kubernetes.io/storage-class: netapp-block-standard
      template.openshift.io.bcgov/create: 'true'
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: postgresql10-backup
    annotations:
      volume.beta.kubernetes.io/storage-class: netapp-file-standard
      template.openshift.io.bcgov/create: 'true'
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 2Gi        
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: postgresql10
  spec:
    replicas: 1
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql10
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: postgresql:10
    - type: ConfigChange
    test: false
    selector:
      name: postgresql10
    template:
      metadata:
        creationTimestamp:
        labels:
          name: postgresql10
      spec:
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql10
        - name: postgresql-backup
          persistentVolumeClaim:
            claimName: postgresql10-backup
        containers:
        - name: postgresql10
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_DATABASE
            value: tfrs
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: tfrs-postgresql-staging
                key: app-db-username
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tfrs-postgresql-staging
                key: app-db-password
          resources:
            request:
              cpu: 300m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
          - name: postgresql-data
            mountPath: "/var/lib/pgsql/data"
          - name: postgresql-backup
            mountPath: "/postgresql-backup"  
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d tfrs -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
  status: {}
