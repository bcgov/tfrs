result = 0
runParallel = true
tfrsRelease="v1.5.2"
def runFunctionalTest = input id: 'runFunctionalTest', message: 'Do you want to run functional test?', parameters: [choice(choices: ['Yes', 'No'], description: 'Option for running functional test', name: 'runFunctionalTest')]

podTemplate(label: "develop-backend-python-${env.BUILD_NUMBER}", name: "develop-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            activeDeadlineSeconds: 600,
            slaveConnectTimeout: 600,
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
){    
    
    node("develop-backend-python-${env.BUILD_NUMBER}") {
        //checkout code in order to load groovy scripts
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]

        //load prepareOtherStages.groovy
        def prepareOtherStages = load "openshift/pipelines/scripts/prepareOtherStages.groovy"

        //unit test stage
        prepareOtherStages.unitTestStage().call()
    }
}

echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}

podTemplate(label: "develop-maven-${env.BUILD_NUMBER}", name: "develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                activeDeadlineSeconds: 600,
                slaveConnectTimeout: 600,
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {

    node("develop-maven-${env.BUILD_NUMBER}") {

        //checkout code
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]

        //load groovy scripts
        def prepareBuilds = load "openshift/pipelines/scripts/prepareBuilds.groovy"
        def prepareDCStages = load "openshift/pipelines/scripts/prepareDCStages.groovy"
        def prepareOtherStages = load "openshift/pipelines/scripts/prepareOtherStages.groovy"

        //Sonarqube stage
        prepareOtherStages.sonarqubeStage().call()

        //run all the builds
        backendBuildStages = prepareBuilds.backendBuildStages('dev')
        frontendBuildStages = prepareBuilds.frontendBuildStages('dev')
        for (builds in backendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }
        for (builds in frontendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }

        //Bring up Maintenance Page
        prepareOtherStages.bringUpMaintenancePageStage("mem-tfrs-dev").call()

        //Datebase Backup
        prepareOtherStages.databaseBackupStage("mem-tfrs-dev", tfrsRelease).call()

        //apply deployment configs
        //if there is an new environment variable added to the invoked template, the stage needs to be applied.
        //prepareDCStages.backendDCStage("dev").call()
        //prepareDCStages.celeryDCStage("dev").call()
        //prepareDCStages.scanCoordinatorDCStage("dev").call()
        //prepareDCStages.scanHandlerDCStage("dev").call()
        //prepareDCStages.notificationServerDCStage("dev").call()
        //prepareDCStages.frontendDCStage("dev").call()

        //Deploy Backend, tag the latest to env tag
        prepareOtherStages.deployBackendStage("mem-tfrs-dev").call()
    
        //Deploy Frontend, tag the latest to env tag
        prepareOtherStages.deployFrontendStage("mem-tfrs-dev").call()

        //Functional Test
        if(runFunctionalTest == 'Yes') {
            echo "confirmed to run functional test"
            prepareOtherStages.functionalTestStage().call()
        }

        //Ask for confirmation before taking down maintenance page.
        prepareOtherStages.confirmStage("Please confirm to take down the maintenance page").call()
        
        //Take down Maintenance Page
        prepareOtherStages.takeDownMaintenancePageStage("mem-tfrs-dev").call()

        //Refresh SchemaSpy
        prepareOtherStages.refreshSchemaspyStage("mem-tfrs-dev").call()

    } //end of node

} //end of podTemplate
