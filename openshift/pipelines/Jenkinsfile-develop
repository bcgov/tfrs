result = 0
runParallel = true
tfrsRelease="devops-env-restore"

builds = load './scripts/prepareBuilds.groovy'

/****
podTemplate(label: "develop-backend-python-${env.BUILD_NUMBER}", name: "develop-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
){    
    node("develop-backend-python-${env.BUILD_NUMBER}") {
        stage('Unit Test') {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]
            dir('backend') {
                try {
                    sh 'pip install --upgrade pip && pip install -r requirements.txt'
                    sh 'python manage.py collectstatic && python manage.py migrate'
                    sh 'python manage.py test -c nose.cfg'
                } catch(Throwable t) {
                    result = 1;
                } finally {
                    //stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                    junit 'nosetests.xml'
                }
            }
        }
    }
}
****/

echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}

//organize all build stages
backendBuildStages = builds.prepareBackendBuildStages()
frontendBuildStages = builds.prepareFrontendBuildStages()

podTemplate(label: "develop-maven-${env.BUILD_NUMBER}", name: "develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {

    node("develop-maven-${env.BUILD_NUMBER}") {

        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]

        //run backend builds
        for (builds in backendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }

        //run frontend builds
        for (builds in frontendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }

        stage('Bring up Maintenance Page') {
            sh returnStatus: true, script: "oc scale dc maintenance-page -n mem-tfrs-dev --replicas=1 --timeout=20s"
            sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-frontend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
            sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-backend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
        }
        
        stage('Datebase Backup') {
            postgresql_pod_name=sh (script: 'oc get pods -n mem-tfrs-dev | grep postgresql96 | awk \'{print $1}\'', returnStdout: true).trim()
            echo "start backup script tfrsdump-dev.sh on dev, postgresql_pod_name is ${postgresql_pod_name}"
            sh returnStdout: true, script: "oc exec ${postgresql_pod_name} -c postgresql96 -n mem-tfrs-dev -- bash /postgresql-backup/tfrs-backup.sh ${tfrsRelease} dev"
            echo 'backup script completed'
        }

        stage('Apply Backend Deployment Config') {
            timeout(300) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def backendDCJson = openshift.process(readFile(file:'openshift/templates/components/backend/tfrs-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "SOURCE_IS_NAME=tfrs",
                        "ROUTE_HOST_NAME=dev-lowcarbonfuels.pathfinder.gov.bc.ca",
                        "ROUTE_NAME=dev-lowcarbonfuels-backend",
                        "KEYCLOAK_SA_BASEURL=https://sso-dev.pathfinder.gov.bc.ca",
                        "KEYCLOAK_SA_CLIENT_ID=tfrs-dev-django-sa",
                        "KEYCLOAK_SA_REALM=tfrs-dev",
                        "KEYCLOAK_AUDIENCE=tfrs-dev",
                        "KEYCLOAK_CERTS_URL=https://sso-dev.pathfinder.gov.bc.ca/auth/realms/tfrs-dev/protocol/openid-connect/certs",
                        "KEYCLOAK_CLIENT_ID=tfrs-dev",
                        "KEYCLOAK_ISSUER=https://sso-dev.pathfinder.gov.bc.ca/auth/realms/tfrs-dev",
                        "KEYCLOAK_REALM=https://sso-dev.pathfinder.gov.bc.ca/auth/realms/tfrs-dev")
                        openshift.apply(backendDCJson)
                    }
                }
            }
        }

        stage('Apply Celery Deployment Config') {
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def celeryDCJson = openshift.process(readFile(file:'openshift/templates/components/celery/celery-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "SOURCE_IS_NAME=celery-develop"
                        )
                        openshift.apply(celeryDCJson)
                    }
                }
            }
        }

        stage('Apply Scan-coordinator Deployment Config') {
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def scanCoordinatorDCJson = openshift.process(readFile(file:'openshift/templates/components/scan-coordinator/scan-coordinator-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "SOURCE_IS_NAME=scan-coordinator-develop"
                        )
                        openshift.apply(scanCoordinatorDCJson)
                    }
                }
            }
        }

        stage('Apply Scan-handler Deployment Config') {
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def scanHandlerDCJson = openshift.process(readFile(file:'openshift/templates/components/scan-handler/scan-handler-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "SOURCE_IS_NAME=scan-handler-develop"
                        )
                        openshift.apply(scanHandlerDCJson)
                    }
                }
            }
        }

        stage('Apply Notificstion-server Deployment Config') {
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def notificationServerDCJson = openshift.process(readFile(file:'openshift/templates/components/notification/notification-server-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "SOURCE_IS_NAME=notification-server-develop",
                        "DASH_ENV_NAME=-dev",
                        "ROUTE_NAME=dev-lowcarbonfuels-notification",
                        "ROUTE_HOST=dev-lowcarbonfuels.pathfinder.gov.bc.ca"
                        )
                        openshift.apply(notificationServerDCJson)
                    }
                }
            }
        }

        stage('Apply Client Deployment Config') {
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-dev") {
                        def clientDCJson = openshift.process(readFile(file:'openshift/templates/components/frontend/client-dc.json'), 
                        "-p", 
                        "ENV_NAME=dev", 
                        "KEYCLOAK_AUTHORITY=https://sso-dev.pathfinder.gov.bc.ca/auth/realms/tfrs-dev",
                        "KEYCLOAK_CLIENT_ID=tfrs-dev",
                        "KEYCLOAK_CALLBACK_URL=https://dev-lowcarbonfuels.pathfinder.gov.bc.ca/authCallback",
                        "KEYCLOAK_LOGOUT_URL=https://logontest.gov.bc.ca/clp-cgi/logoff.cgi?returl=https%3A%2F%2Fdev-lowcarbonfuels.pathfinder.gov.bc.ca%2F",
                        "SOURCE_IS_NAME=client-develop",
                        "ROUTE_HOST_NAME=dev-lowcarbonfuels.pathfinder.gov.bc.ca",
                        "ROUTE_NAME=dev-lowcarbonfuels-frontend"
                        )
                        openshift.apply(clientDCJson)
                    }
                }
            }
        }

        stage('Deploy Backend on Dev') {
            script {
                openshift.withProject("mem-tfrs-tools") {
                    openshift.tag("mem-tfrs-tools/tfrs-develop:latest", "mem-tfrs-tools/tfrs-develop:dev")
                    sh 'sleep 20s'
                    openshift.tag("mem-tfrs-tools/scan-coordinator-develop:latest", "mem-tfrs-tools/scan-coordinator-develop:dev")
                    sh 'sleep 10s'
                    openshift.tag("mem-tfrs-tools/scan-handler-develop:latest", "mem-tfrs-tools/scan-handler-develop:dev")
                    sh 'sleep 10s'
                    openshift.tag("mem-tfrs-tools/celery-develop:latest", "mem-tfrs-tools/celery-develop:dev")
                    sh 'sleep 10s'
                }
            }
        }
    
        stage('Deploy Frontend on Dev') {
            script {
                openshift.withProject("mem-tfrs-tools") {
                    openshift.tag("mem-tfrs-tools/client-develop:latest", "mem-tfrs-tools/client-develop:dev")
                    sh 'sleep 10s'
                    openshift.tag("mem-tfrs-tools/notification-server-develop:latest", "mem-tfrs-tools/notification-server-develop:dev")
                    sh 'sleep 10s'
                }
            }
        }
        
        stage('Refresh SchemaSpy') {
            echo "Refreshing SchemaSpy for Dev Database"
            sh returnStdout: true, script: "oc scale dc schema-spy-public --replicas=0 -n mem-tfrs-dev"
            sh 'sleep 10s'
            sh returnStdout: true, script: "oc scale dc schema-spy-public --replicas=1 -n mem-tfrs-dev"
            sh returnStdout: true, script: "oc scale dc schema-spy-audit --replicas=0 -n mem-tfrs-dev"
            sh 'sleep 10s'
            sh returnStdout: true, script: "oc scale dc schema-spy-audit --replicas=1 -n mem-tfrs-dev"
        }    

        stage('Take down Maintenance Page') {
            sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-backend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"backend\"}, \"port\":{\"targetPort\":\"web\"}}}'"
            sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-frontend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"client\"}, \"port\":{\"targetPort\":\"web\"}}}'"
            sh returnStatus: true, script: "oc scale dc maintenance-page -n mem-tfrs-dev --replicas=0 --timeout=20s"
        }

    } //end of node

} //end of podTemplate
