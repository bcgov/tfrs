result = 0
runParallel = true
tfrsRelease="v1.5.1"

podTemplate(label: "master-backend-python-${env.BUILD_NUMBER}", name: "master-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
){
    node("master-backend-python-${env.BUILD_NUMBER}") {
        //checkout code in order to load groovy scripts
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]

        //load prepareOtherStages.groovy
        def prepareOtherStages = load "openshift/pipelines/scripts/prepareOtherStages.groovy"

        //unit test stage
        prepareOtherStages.unitTestStage().call()
    }
} //end of podTemplate
        
echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}
        
podTemplate(label: "master-maven-${env.BUILD_NUMBER}", name: "master-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {
    node("master-maven-${env.BUILD_NUMBER}") {

        //checkout code
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${tfrsRelease}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-account', url: 'https://github.com/bcgov/tfrs.git']]]

        //load groovy scripts
        def prepareBuilds = load "openshift/pipelines/scripts/prepareBuilds.groovy"
        def prepareDCStages = load "openshift/pipelines/scripts/prepareDCStages.groovy"
        def prepareOtherStages = load "openshift/pipelines/scripts/prepareOtherStages.groovy"

        //Sonarqube stage, test and prod don't run this stage
        //prepareOtherStages.sonarqubeStage().call()

        //run all the builds for test
        backendBuildStages = prepareBuilds.backendBuildStages('prod')
        frontendBuildStages = prepareBuilds.frontendBuildStages('prod')
        for (builds in backendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }
        for (builds in frontendBuildStages) {
            if (runParallel) {
                parallel(builds)
            } else {
                // run serially (nb. Map is unordered! )
                for (build in builds.values()) {
                    build.call()
                }
            }
        }

        //===== deploy on test =====
        //Please confirm to continue the deployment on Test
        prepareOtherStages.confirmStage("Please confirm to continue the deployment on Test").call()

        //Bring up Maintenance Page
        prepareOtherStages.bringUpMaintenancePageStage("mem-tfrs-test").call()

        //Datebase Backup
        prepareOtherStages.databaseBackupStage("mem-tfrs-test", tfrsRelease).call()

        //apply deployment configs
        //if there is an new environment variable added to the invoked template, the stage needs to be applied.
        prepareDCStages.backendDCStage("test").call()
        //prepareDCStages.celeryDCStage("test").call()
        //prepareDCStages.scanCoordinatorDCStage("test").call()
        //prepareDCStages.scanHandlerDCStage("test").call()
        //prepareDCStages.notificationServerDCStage("test").call()
        //prepareDCStages.frontendDCStage("test").call()

        //last chance to quit Test deployment
        prepareOtherStages.confirmStage("Please verify the database backup and confirm the deployment on Test, this is the last chance to quit.").call()

        //Deploy Backend, tag the latest to env tag
        prepareOtherStages.deployBackendStage("mem-tfrs-test").call()
    
        //Deploy Frontend, tag the latest to env tag
        prepareOtherStages.deployFrontendStage("mem-tfrs-test").call()

        //Ask for confirmation before take down maintenance page.
        prepareOtherStages.confirmStage("Please confirm to take down the maintenance page on Test. If there are operational scripts to run, this is the time.").call()
        
        //Take down Maintenance Page
        prepareOtherStages.takeDownMaintenancePageStage("mem-tfrs-test").call()

        //Refresh SchemaSpy
        prepareOtherStages.refreshSchemaspyStage("mem-tfrs-test").call()

        //===== deploy on prod =====
        //Please confirm to continue the deployment on Prod
        prepareOtherStages.confirmStage("Please confirm to continue the deployment on Prod").call()
        
        //Bring up Maintenance Page
        prepareOtherStages.bringUpMaintenancePageStage("mem-tfrs-prod").call()

        //Datebase Backup
        prepareOtherStages.databaseBackupStage("mem-tfrs-prod", tfrsRelease).call()

        //apply deployment configs
        //if there is an new environment variable added to the invoked template, the stage needs to be applied.
        prepareDCStages.backendDCStage("prod").call()
        //prepareDCStages.celeryDCStage("prod").call()
        //prepareDCStages.scanCoordinatorDCStage("prod").call()
        //prepareDCStages.scanHandlerDCStage("prod").call()
        //prepareDCStages.notificationServerDCStage("prod").call()
        //prepareDCStages.frontendDCStage("prod").call()

        //last chance to quit prod deployment
        prepareOtherStages.confirmStage("Please verify the database backup and confirm the deployment on Prod, this is the last chance to quit.").call()

        //Deploy Backend, tag the latest to env tag
        prepareOtherStages.deployBackendStage("mem-tfrs-prod").call()
    
        //Deploy Frontend, tag the latest to env tag
        prepareOtherStages.deployFrontendStage("mem-tfrs-prod").call()

        //Ask for confirmation before take down maintenance page.
        prepareOtherStages.confirmStage("Please confirm to take down the maintenance page on Prod. If there are operational scripts to run, this is the time.").call()
        
        //Take down Maintenance Page
        prepareOtherStages.takeDownMaintenancePageStage("mem-tfrs-prod").call()

        //Refresh SchemaSpy
        prepareOtherStages.refreshSchemaspyStage("mem-tfrs-prod").call()

    } //end of node
} //end of podTemplate
