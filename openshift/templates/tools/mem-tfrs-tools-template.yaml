apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: mem-tfrs-tools
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: admin
  roleRef:
    name: admin
  subjects:
  - kind: User
    name: sheaphillips
  - kind: User
    name: rajpersram
  - kind: User
    name: kuanfandevops
  - kind: User
    name: cvarjao
  userNames:
  - sheaphillips
  - rajpersram
  - kuanfandevops
  - cvarjao
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    labels:
      app: jenkins-pipeline
      template: jenkins-persistent-template
    name: jenkins_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: mem-tfrs-tools
  - kind: User
    name: matthewhall78
  - kind: User
    name: dainetrinidad
  - kind: User
    name: rstens
  userNames:
  - system:serviceaccount:mem-tfrs-tools:jenkins
  - matthewhall78
  - dainetrinidad
  - rstens
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:deployers
  roleRef:
    name: system:deployer
  subjects:
  - kind: ServiceAccount
    name: deployer
    namespace: mem-tfrs-tools
  userNames:
  - system:serviceaccount:mem-tfrs-tools:deployer
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:image-builders
  roleRef:
    name: system:image-builder
  subjects:
  - kind: ServiceAccount
    name: builder
    namespace: mem-tfrs-tools
  userNames:
  - system:serviceaccount:mem-tfrs-tools:builder
- apiVersion: v1
  groupNames:
  - system:serviceaccounts:mem-tfrs-tools
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:image-pullers
  roleRef:
    name: system:image-puller
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: mem-tfrs-dev
  - kind: ServiceAccount
    name: default
    namespace: mem-tfrs-test
  - kind: ServiceAccount
    name: default
    namespace: mem-tfrs-prod
  - kind: ServiceAccount
    name: jenkins
    namespace: default
  - kind: ServiceAccount
    name: jenkins-pipeline-svc
    namespace: default
  - kind: ServiceAccount
    name: deployer
    namespace: mem-tfrs-dev
  - kind: SystemGroup
    name: system:serviceaccounts:mem-tfrs-tools
  userNames:
  - system:serviceaccount:mem-tfrs-dev:default
  - system:serviceaccount:mem-tfrs-test:default
  - system:serviceaccount:mem-tfrs-prod:default
  - system:serviceaccount:default:jenkins
  - system:serviceaccount:default:jenkins-pipeline-svc
  - system:serviceaccount:mem-tfrs-dev:deployer
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: view
  roleRef:
    name: view
  subjects:
  - kind: User
    name: swcurran
  - kind: ServiceAccount
    name: jenkins
    namespace: default
  userNames:
  - swcurran
  - system:serviceaccount:default:jenkins
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      control-plane.alpha.kubernetes.io/leader: '{"holderIdentity":"d49aaa14-e506-11e7-bfd0-0a58ac332043","leaseDurationSeconds":15,"acquireTime":"2018-01-09T21:25:22Z","renewTime":"2018-01-09T21:25:26Z","leaderTransitions":0}'
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-block
      volume.beta.kubernetes.io/storage-provisioner: gluster.org/glusterblock
    creationTimestamp: null
    name: jenkins-cns
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-99698347-f583-11e7-9ace-0050568348cc
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: jenkins-cns2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    volumeName: pvc-d753561f-fd60-11e7-b70e-005056832285
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: postgresql-sonarqube-cns
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-814c86b8-f634-11e7-9f70-005056832285
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: sonarqube-data-cns
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    volumeName: pvc-6eefa34f-f634-11e7-9f70-005056832285
  status: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the client / front end image
    creationTimestamp: null
    name: client
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: client:latest
    postCommit: {}
    resources:
      limits:
        cpu: "2"
        memory: 4Gi
    runPolicy: Serial
    source:
      contextDir: frontend
      git:
        ref: master
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:latest
          namespace: openshift
        runtimeArtifacts:
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/index.html
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/assets
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/build
        runtimeImage:
          kind: ImageStreamTag
          name: nginx-runtime:latest
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the client / front end image
    creationTimestamp: null
    name: client-develop
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: client:latest
    postCommit: {}
    resources:
      limits:
        cpu: "2"
        memory: 4Gi
    runPolicy: Serial
    source:
      contextDir: frontend
      git:
        ref: develop
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:latest
          namespace: openshift
        runtimeArtifacts:
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/index.html
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/assets
        - destinationDir: tmp/app/dist
          sourcePath: /opt/app-root/src/public/build
        runtimeImage:
          kind: ImageStreamTag
          name: nginx-runtime:latest
          namespace: mem-tfrs-tools
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: develop-client-pipeline
      name: develop-client-pipeline
      template: develop-client-pipeline
    name: develop-client-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Parallel
    source:
      git:
        ref: develop
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: frontend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: develop-tfrs-pipeline
      name: develop-tfrs-pipeline
      template: develop-tfrs-pipeline
    name: develop-tfrs-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Parallel
    source:
      git:
        ref: develop
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: backend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    creationTimestamp: null
    name: devops-testdisablemigration
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: tfrs:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: backend
      git:
        ref: devops-testdisablemigration
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: PIP_INDEX_URL
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
      type: Source
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: master-client-pipeline
      name: master-client-pipeline
      template: master-client-pipeline
    name: master-client-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Parallel
    source:
      git:
        ref: master
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: frontend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: master-tfrs-pipeline
      name: master-tfrs-pipeline
      template: master-tfrs-pipeline
    name: master-tfrs-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Parallel
    source:
      git:
        ref: master
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: backend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: nginx-runtime
    name: nginx-runtime
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: nginx-runtime:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: openshift/templates/nginx-runtime
      git:
        ref: devops-nginx
        uri: https://github.com/bcgov/tfrs
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: schema-spy
      buildconfig: schema-spy
    name: schema-spy
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: schema-spy:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/bcgov/SchemaSpy.git
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    triggers:
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    creationTimestamp: null
    name: tfrs
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: tfrs:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: backend
      git:
        ref: master
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: PIP_INDEX_URL
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    creationTimestamp: null
    name: tfrs-develop
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: tfrs:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: backend
      git:
        ref: develop
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: PIP_INDEX_URL
        from:
          kind: ImageStreamTag
          name: python:3.6
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: working-client-pipeline
      name: working-client-pipeline
      template: working-client-pipeline
    name: working-client-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Parallel
    source:
      git:
        ref: devops-coverage
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: backend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: working-tfrs-pipeline
      name: working-tfrs-pipeline
      template: working-tfrs-pipeline
    name: working-tfrs-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: devops-testdisablemigration
        uri: https://github.com/bcgov/tfrs.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: backend/Jenkinsfile-develop
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    generation: 1
    labels:
      app: jenkins-pipeline
      template: jenkins-persistent-template
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: jenkins
      spec:
        containers:
        - env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: "true"
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: OPENSHIFT_JENKINS_JVM_ARCH
            value: x86_64
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          - name: JAVA_OPTS
            value: -XX:MaxMetaspaceSize=512m
          image: registry.access.redhat.com/openshift3/jenkins-2-rhel7@sha256:c2e5ffc909fc598628caebe56571849cbcbeea6c99f885a9870cb8c5967d5111
          imagePullPolicy: IfNotPresent
          name: jenkins
          resources:
            limits:
              cpu: "2"
              memory: 6Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: jenkins
        serviceAccountName: jenkins
        terminationGracePeriodSeconds: 30
        volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-cns2
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      openshift.io/container.postgresql.image.entrypoint: '["container-entrypoint","run-postgresql"]'
    creationTimestamp: null
    generation: 1
    labels:
      app: postgresql-sonarqube
    name: postgresql-sonarqube
  spec:
    replicas: 1
    selector:
      app: postgresql-sonarqube
      deploymentconfig: postgresql-sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/container.postgresql.image.entrypoint: '["container-entrypoint","run-postgresql"]'
        creationTimestamp: null
        labels:
          app: postgresql-sonarqube
          deploymentconfig: postgresql-sonarqube
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: sonarqube
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonarqube-secrets
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: sonarqube-secrets
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonarqube-secrets
          image: registry.access.redhat.com/rhscl/postgresql-94-rhel7@sha256:999f3041aed3bbdbca5c55bfc5849ca15e5546f457e82582863ae271b6485478
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgres
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-sonarqube-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-sonarqube-data
          persistentVolumeClaim:
            claimName: postgresql-sonarqube-cns
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgres
        from:
          kind: ImageStreamTag
          name: postgresql:9.4
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
        creationTimestamp: null
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
      spec:
        containers:
        - env:
          - name: SONARQUBE_JDBC_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonarqube-secrets
          - name: SONARQUBE_JDBC_URL
            value: jdbc:postgresql://postgresql-sonarqube/sonarqube
          - name: SONARQUBE_JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonarqube-secrets
          - name: SONARQUBE_ADMINPW
            valueFrom:
              secretKeyRef:
                key: sonar-admin-password
                name: sonarqube-secrets
          image: openshiftdemos/sonarqube@sha256:90bc4c270d3a9f9923ef0b38f7904cfb9c00e4307d4d853e9341a334e8f29cf0
          imagePullPolicy: IfNotPresent
          name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 4Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/sonarqube/extensions
            name: sonarqube-extensions
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonarqube-extensions
          persistentVolumeClaim:
            claimName: sonarqube-data-cns
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:6.0
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: cns-upgrade
    name: cns-upgrade
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: cns-upgrade
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: glusterfs-cluster-app
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: jenkins-cns2
    name: glusterfs-dynamic-jenkins-cns2
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: postgresql-sonarqube-cns
    name: glusterfs-dynamic-postgresql-sonarqube-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: sonarqube-data-cns
    name: glusterfs-dynamic-sonarqube-data-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace":
        "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    labels:
      app: jenkins-pipeline
      template: jenkins-persistent-template
    name: jenkins
  spec:
    ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: jenkins-pipeline
      template: jenkins-persistent-template
    name: jenkins-jnlp
  spec:
    ports:
    - name: agent
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    creationTimestamp: null
    name: postgresql-sonarqube
  spec:
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: postgresql-sonarqube
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: tfrs-cnsupgrade
    name: tfrs-cnsupgrade
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: tfrs-cnsupgrade
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      haproxy.router.openshift.io/timeout: 180s
      openshift.io/host.generated: "true"
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
    creationTimestamp: null
    labels:
      app: jenkins-pipeline
      template: jenkins-persistent-template
    name: jenkins
  spec:
    host: jenkins-mem-tfrs-tools.pathfinder.gov.bc.ca
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-10-27T22:29:05Z
        status: "True"
        type: Admitted
      host: jenkins-mem-tfrs-tools.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    host: sonarqube-tfrs-tools.pathfinder.gov.bc.ca
    port:
      targetPort: 9000-tcp
    to:
      kind: Service
      name: sonarqube
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-07-27T16:25:16Z
        status: "True"
        type: Admitted
      host: sonarqube-tfrs-tools.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
