# Generated by Django 3.2.18 on 2023-05-04 18:28

import api.migrations.operations.trigger_operation
import api.models.ComplianceReportSchedules
import api.models.NotificationChannel
import api.models.SigningAuthorityAssertion
import api.notifications.notification_types
import api.validators
import db_comments.model_mixins
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


FILENAME = 'api/migrations/create_audit_trigger.sql'


def create_trigger_0021(apps, schema_editor):

    if schema_editor.connection.vendor != 'postgresql':
        return
    
    with open(FILENAME, 'r') as file:
        sql = file.read()

        with schema_editor.connection.cursor() as cursor:
            cursor.execute(sql)


def drop_trigger_0021(apps, schema_editor):

    if schema_editor.connection.vendor != 'postgresql':
        return

    with schema_editor.connection.cursor() as cursor:
            cursor.execute('drop schema tfrs_audit cascade;')


def create_table_0024(apps, schema_editor):

    ddl_postgresql = 'create table data_load_operations(id serial4 not null primary key, ' \
                 'script_name varchar(1024) not null, ' \
                 'is_reverting bool not null, ' \
                 'successful bool not null, ' \
                 'comment text, ' \
                 'source_code text, ' \
                 'run_at timestamp without time zone not null);' \
                 'comment on table data_load_operations is \'Maintain a record of calls to the load_ops_data management command\';' \
                 'comment on column data_load_operations.id is \'Primary Key\'; ' \
                     'comment on column data_load_operations.script_name is \'Script file name\'; ' \
                     'comment on column data_load_operations.is_reverting is \'True if this was a run to revert a script\'; ' \
                     'comment on column data_load_operations.successful is \'True if the run completed successfully\'; ' \
                     'comment on column data_load_operations.comment is \'Script comment\'; ' \
                     'comment on column data_load_operations.source_code is \'Python source code for the script\'; '  \
                     'comment on column data_load_operations.run_at is \'The time the script run was started\';'
    
    ddl_sqlite = 'create table data_load_operations(id integer not null primary key autoincrement, ' \
                     'script_name varchar(1024) not null, ' \
                     'is_reverting bool not null, ' \
                     'successful bool not null, ' \
                     'comment text, ' \
                     'source_code text, ' \
                     'run_at timestamp without time zone);'

    sql = {}
    sql['sqlite'] = ddl_sqlite
    sql['postgresql'] = ddl_postgresql

    if schema_editor.connection.vendor not in sql.keys():
        return

    with schema_editor.connection.cursor() as cursor:
        cursor.execute(sql[schema_editor.connection.vendor])


def drop_table_0024(apps, schema_editor):

    if schema_editor.connection.vendor not in ['sqlite', 'postgresql']:
        return

    with schema_editor.connection.cursor() as cursor:
        cursor.execute('drop table data_load_operations;')


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.RunPython(
            code=create_trigger_0021,
            reverse_code=drop_trigger_0021,
        ),
        migrations.RunPython(
            code=create_table_0024,
            reverse_code=drop_table_0024,
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('cell_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('effective_date', models.DateField(auto_now_add=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('authorization_id', models.CharField(blank=True, max_length=500, null=True)),
                ('authorization_guid', models.UUIDField(default=None, null=True, unique=True)),
                ('authorization_directory', models.CharField(blank=True, max_length=100, null=True)),
                ('authorization_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('display_name', models.CharField(blank=True, max_length=500, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_user_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CreditTrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('number_of_credits', models.IntegerField(validators=[api.validators.CreditTradeNumberOfCreditsValidator])),
                ('fair_market_value_per_credit', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=999, null=True)),
                ('trade_effective_date', models.DateField(blank=True, null=True)),
                ('note', models.CharField(blank=True, max_length=4000, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittrade_CREATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'credit_trade',
            },
        ),
        migrations.CreateModel(
            name='CreditTradeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradestatus_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradestatus_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'credit_trade_status',
            },
        ),
        migrations.CreateModel(
            name='CreditTradeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('the_type', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('is_gov_only_type', models.BooleanField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradetype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradetype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'credit_trade_type',
            },
        ),
        migrations.CreateModel(
            name='CreditTradeZeroReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('reason', models.CharField(max_length=25)),
                ('description', models.CharField(max_length=1000)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradezeroreason_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradezeroreason_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'credit_trade_zero_reason',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=500)),
                ('created_date', models.DateField()),
            ],
            options={
                'db_table': 'organization',
            },
        ),
        migrations.CreateModel(
            name='OrganizationActionsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('the_type', models.CharField(max_length=25, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationactionstype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationactionstype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_actions_type',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('file_name', models.CharField(blank=True, max_length=250, null=True)),
                ('file_location', models.CharField(blank=True, max_length=2000, null=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('compliance_year', models.CharField(blank=True, max_length=25, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationattachment_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.organization')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationattachment_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_attachment',
            },
        ),
        migrations.CreateModel(
            name='OrganizationBalance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('validated_credits', models.BigIntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationbalance_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('credit_trade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='balances', to='api.credittrade')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='api.organization')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationbalance_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_balance',
            },
        ),
        migrations.CreateModel(
            name='OrganizationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('history_text', models.CharField(max_length=1000)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationhistory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='api.organization')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationhistory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_history',
            },
        ),
        migrations.CreateModel(
            name='OrganizationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(max_length=25, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationstatus_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationstatus_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_status',
            },
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(max_length=25, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField(blank=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationtype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationtype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_type',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=1000)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_permission_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_permission_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'permission',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.CharField(max_length=1000)),
                ('is_government_role', models.BooleanField(default=False)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_role_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_role_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_rolepermission_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='api.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='api.role')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_rolepermission_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'role_permission',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_userrole_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to='api.role')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_userrole_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_role',
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='actions_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organizations', to='api.organizationactionstype'),
        ),
        migrations.AddField(
            model_name='organization',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organization_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organization',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organizations', to='api.organizationstatus'),
        ),
        migrations.AddField(
            model_name='organization',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='organizations', to='api.organizationtype'),
        ),
        migrations.AddField(
            model_name='organization',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organization_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='initiator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='initiator_credit_trades', to='api.organization'),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='respondent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='respondent_credit_trades', to='api.organization'),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trades', to='api.credittradestatus'),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trades', to='api.credittradetype'),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittrade_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='zero_reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trades', to='api.credittradezeroreason'),
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='api.organization'),
        ),
        migrations.AddField(
            model_name='user',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_user_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.RemoveField(
            model_name='organization',
            name='created_date',
        ),
        migrations.AlterField(
            model_name='credittrade',
            name='fair_market_value_per_credit',
            field=models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=999, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username'),
        ),
        migrations.CreateModel(
            name='CompliancePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_complianceperiod_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_complianceperiod_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_period',
            },
        ),
        migrations.AddField(
            model_name='credittrade',
            name='compliance_period',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trades', to='api.complianceperiod'),
        ),
        migrations.AlterModelOptions(
            name='credittrade',
            options={'permissions': (('credit_trade_approve', 'Can approve credit transfers'),)},
        ),
        migrations.CreateModel(
            name='SigningAuthorityAssertion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('display_order', models.IntegerField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_signingauthorityassertion_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_signingauthorityassertion_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'signing_authority_assertion',
            },
        ),
        migrations.CreateModel(
            name='SigningAuthorityConfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('has_accepted', models.BooleanField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_signingauthorityconfirmation_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('credit_trade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='confirmations', to='api.credittrade')),
                ('signing_authority_assertion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='confirmations', to='api.signingauthorityassertion')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_signingauthorityconfirmation_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'signing_authority_confirmation',
            },
        ),
        migrations.AlterField(
            model_name='credittrade',
            name='fair_market_value_per_credit',
            field=models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=999, null=True, validators=[api.validators.CreditTradeFairMarketValueValidator]),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        migrations.AlterModelOptions(
            name='credittrade',
            options={},
        ),
        migrations.AlterField(
            model_name='user',
            name='cell_phone',
            field=models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in theformat: '+999999999'. Up to 15 digitsallowed.", regex=b'^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in theformat: '+999999999'. Up to 15 digitsallowed.", regex=b'^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='is_rescinded',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='user',
            name='cell_phone',
            field=models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.CreateModel(
            name='CreditTradeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('credit_trade_update_time', models.DateTimeField()),
                ('number_of_credits', models.IntegerField()),
                ('fair_market_value_per_credit', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=999, null=True)),
                ('trade_effective_date', models.DateField(blank=True, null=True)),
                ('note', models.CharField(blank=True, max_length=4000, null=True)),
                ('is_internal_history_record', models.BooleanField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradehistory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('credit_trade', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.credittrade')),
                ('respondent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.organization')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.credittradestatus')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.credittradetype')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradehistory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to=settings.AUTH_USER_MODEL)),
                ('zero_reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.credittradezeroreason')),
                ('compliance_period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_histories', to='api.complianceperiod')),
                ('is_rescinded', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'credit_trade_history',
                'ordering': ['-create_timestamp'],
            },
        ),
        migrations.AlterModelManagers(
            name='user',
            managers=[
            ],
        ),
        migrations.CreateModel(
            name='OrganizationAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('primary', models.BooleanField(default=False)),
                ('address_line_1', models.CharField(blank=True, max_length=500, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=100, null=True)),
                ('address_line_3', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('other', models.CharField(blank=True, max_length=100, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationaddress_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='api.organization')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_organizationaddress_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_address',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CreditTradeComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('comment', models.CharField(blank=True, db_column='credit_trade_comment', max_length=4000, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradecomment_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('credit_trade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_comments', to='api.credittrade')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_credittradecomment_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('privileged_access', models.BooleanField(db_column='is_privileged_access', default=True)),
                ('trade_history_at_creation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='credit_trade_comments', to='api.credittradehistory')),
            ],
            options={
                'ordering': ['create_timestamp'],
                'db_table': 'credit_trade_comment',
            },
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='credit_trade',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='credit_trade_comment',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='credit_trade_history',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='organization',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='organization_balance',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='user_role',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='user',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='signing_authority_confirmation',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='data_load_operations',
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('channel', models.CharField(choices=[(api.models.NotificationChannel.NotificationChannel.AvailableChannels['IN_APP'], 'In-Application'), (api.models.NotificationChannel.NotificationChannel.AvailableChannels['SMS'], 'SMS'), (api.models.NotificationChannel.NotificationChannel.AvailableChannels['EMAIL'], 'Email')], max_length=64, unique=True)),
                ('enabled', models.BooleanField()),
                ('subscribe_by_default', models.BooleanField()),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationchannel_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationchannel_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_channel',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='NotificationMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('message', models.CharField(max_length=4000)),
                ('is_read', models.BooleanField(default=False)),
                ('is_warning', models.BooleanField(default=False)),
                ('is_error', models.BooleanField(default=False)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationmessage_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('originating_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='notification_originating_user', to=settings.AUTH_USER_MODEL)),
                ('related_credit_trade', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.credittrade')),
                ('related_organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.organization')),
                ('related_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='notification_related_user', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationmessage_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_message',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='NotificationSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('notification_type', models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated')], max_length=128)),
                ('enabled', models.BooleanField()),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notificationchannel')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationsubscription_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notificationsubscription_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_subscription',
                'unique_together': {('user', 'channel', 'notification_type')},
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AlterField(
            model_name='notificationchannel',
            name='channel',
            field=models.CharField(choices=[(api.models.NotificationChannel.NotificationChannel.AvailableChannels['IN_APP'], 'IN_APP'), (api.models.NotificationChannel.NotificationChannel.AvailableChannels['SMS'], 'SMS'), (api.models.NotificationChannel.NotificationChannel.AvailableChannels['EMAIL'], 'EMAIL')], max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated')], max_length=128),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='is_archived',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_RESCINDED'], 'PVR Rescinded'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated')], max_length=128),
        ),
        migrations.AddField(
            model_name='role',
            name='display_order',
            field=models.IntegerField(default=1),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='credittradehistory',
            name='user_role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roles', to='api.role'),
        ),
        migrations.CreateModel(
            name='UserCreationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('keycloak_email', models.EmailField(max_length=254, unique=True)),
                ('is_mapped', models.BooleanField(default=False)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_usercreationrequest_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_usercreationrequest_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='creation_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_creation_request',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_RESCINDED'], 'PVR Rescinded'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_RETURNED_TO_ANALYST'], 'PVR Returned to Analyst')], max_length=128),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.URLField()),
                ('size', models.BigIntegerField(default=0)),
                ('mime_type', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'document',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=120, null=True, unique=True)),
            ],
            options={
                'db_table': 'document_category',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DocumentHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'document_history',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DocumentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=25, null=True, unique=True)),
            ],
            options={
                'db_table': 'document_status',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('the_type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='types', to='api.documentcategory')),
            ],
            options={
                'db_table': 'document_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='user',
            name='effective_date',
        ),
        migrations.RemoveField(
            model_name='user',
            name='expiration_date',
        ),
        migrations.AlterField(
            model_name='organizationtype',
            name='display_order',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.DeleteModel(
            name='OrganizationAttachment',
        ),
        migrations.AddField(
            model_name='documenttype',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documenttype_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documenttype',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documenttype_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentstatus',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentstatus_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentstatus',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentstatus_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documenthistory_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='creating_organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.organization'),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='history_entries', to='api.document'),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='modifying_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='modifying_user_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='role', to='api.role'),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.documentstatus'),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.documenttype'),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documenthistory_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentcategory',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcategory_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='documentcategory',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcategory_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_document_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='creating_organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.organization'),
        ),
        migrations.AddField(
            model_name='document',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.documentstatus'),
        ),
        migrations.AddField(
            model_name='document',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.documenttype'),
        ),
        migrations.AddField(
            model_name='document',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_document_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='user',
            name='cell_phone',
            field=models.CharField(blank=True, max_length=17, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=17, null=True),
        ),
        migrations.RemoveField(
            model_name='document',
            name='mime_type',
        ),
        migrations.RemoveField(
            model_name='document',
            name='size',
        ),
        migrations.RemoveField(
            model_name='document',
            name='url',
        ),
        migrations.AddField(
            model_name='document',
            name='comment',
            field=models.CharField(blank=True, max_length=1024, null=True),
        ),
        migrations.AddField(
            model_name='document',
            name='compliance_period',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='api.complianceperiod'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='comment',
            field=models.CharField(blank=True, max_length=1024, null=True),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='compliance_period',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='api.complianceperiod'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='DocumentFileAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.URLField(max_length=2048)),
                ('size', models.BigIntegerField(default=0)),
                ('mime_type', models.CharField(max_length=255)),
                ('security_scan_status', models.CharField(choices=[('NOT RUN', 'Not Run'), ('IN PROGRESS', 'In Progress'), ('PASS', 'Passed'), ('FAIL', 'Failed')], default='NOT RUN', max_length=20)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentfileattachment_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attachments', to='api.document')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentfileattachment_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('filename', models.CharField(max_length=260)),
            ],
            options={
                'db_table': 'document_file',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='document',
            name='creating_organization',
        ),
        migrations.RemoveField(
            model_name='documenthistory',
            name='creating_organization',
        ),
        migrations.RenameField(
            model_name='documenthistory',
            old_name='modifying_user_role',
            new_name='user_role',
        ),
        migrations.RemoveField(
            model_name='documenthistory',
            name='modifying_user',
        ),
        migrations.RenameField(
            model_name='User',
            old_name='display_name',
            new_name='_display_name',
        ),
        migrations.AlterField(
            model_name='User',
            name='_display_name',
            field=models.CharField(blank=True, db_column='display_name', max_length=500, null=True),
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='credit_trade_update_time',
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='user',
        ),
        migrations.RemoveField(
            model_name='user',
            name='authorization_directory',
        ),
        migrations.RemoveField(
            model_name='user',
            name='authorization_email',
        ),
        migrations.RemoveField(
            model_name='user',
            name='authorization_guid',
        ),
        migrations.RemoveField(
            model_name='user',
            name='authorization_id',
        ),
        migrations.CreateModel(
            name='DocumentComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('comment', models.CharField(blank=True, db_column='document_comment', max_length=4000, null=True)),
                ('privileged_access', models.BooleanField(db_column='is_privileged_access', default=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcomment_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='document_comments', to='api.document')),
                ('document_history_at_creation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='document_comments', to='api.documenthistory')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcomment_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'document_comments',
                'ordering': ['create_timestamp'],
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='document',
            name='comment',
        ),
        migrations.RemoveField(
            model_name='documenthistory',
            name='comment',
        ),
        migrations.AddField(
            model_name='document',
            name='record_number',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='record_number',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.CreateModel(
            name='DocumentMilestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('milestone', models.CharField(blank=True, max_length=1000, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentmilestone_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='milestones', to='api.document')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentmilestone_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'document_milestone',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_RESCINDED'], 'PVR Rescinded'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_RETURNED_TO_ANALYST'], 'PVR Returned to Analyst'), (api.notifications.notification_types.NotificationType['DOCUMENT_PENDING_SUBMISSION'], 'Document Pending Submission'), (api.notifications.notification_types.NotificationType['DOCUMENT_SUBMITTED'], 'Document Submitted'), (api.notifications.notification_types.NotificationType['DOCUMENT_SCAN_FAILED'], 'Document Security Scan Failed')], max_length=128),
        ),
        migrations.AddField(
            model_name='documentfileattachment',
            name='is_removed',
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name='documenthistory',
            name='user_role',
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='related_document',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.document'),
        ),
        migrations.AlterField(
            model_name='documentfileattachment',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='document_attachments', to='api.document'),
        ),
        migrations.RemoveField(
            model_name='document',
            name='record_number',
        ),
        migrations.RemoveField(
            model_name='documenthistory',
            name='record_number',
        ),
        migrations.AddField(
            model_name='documentfileattachment',
            name='record_number',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_RESCINDED'], 'PVR Rescinded'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_RETURNED_TO_ANALYST'], 'PVR Returned to Analyst'), (api.notifications.notification_types.NotificationType['DOCUMENT_PENDING_SUBMISSION'], 'Document Pending Submission'), (api.notifications.notification_types.NotificationType['DOCUMENT_SUBMITTED'], 'Document Submitted'), (api.notifications.notification_types.NotificationType['DOCUMENT_SCAN_FAILED'], 'Document Security Scan Failed'), (api.notifications.notification_types.NotificationType['DOCUMENT_RECEIVED'], 'Document Received'), (api.notifications.notification_types.NotificationType['DOCUMENT_ARCHIVED'], 'Document Archived')], max_length=128),
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='is_internal_history_record',
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='note',
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='update_timestamp',
        ),
        migrations.RemoveField(
            model_name='credittradehistory',
            name='update_user',
        ),
        migrations.RemoveField(
            model_name='credittrade',
            name='note',
        ),
        migrations.CreateModel(
            name='DocumentCreditTrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcredittrade_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('credit_trade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.credittrade')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.document')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_documentcredittrade_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'document_credit_trade',
                'unique_together': {('credit_trade', 'document')},
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='credittrade',
            name='documents',
            field=models.ManyToManyField(through='api.DocumentCreditTrade', to='api.Document'),
        ),
        migrations.AddField(
            model_name='document',
            name='credit_trades',
            field=models.ManyToManyField(through='api.DocumentCreditTrade', to='api.CreditTrade'),
        ),
        migrations.CreateModel(
            name='FuelCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('fuel_code', models.CharField(max_length=100)),
                ('company', models.CharField(max_length=100)),
                ('carbon_intensity', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=999, null=True)),
                ('application_date', models.DateField(blank=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('fuel', models.CharField(blank=True, max_length=100, null=True)),
                ('feedstock', models.CharField(blank=True, max_length=100, null=True)),
                ('feedstock_location', models.CharField(blank=True, max_length=100, null=True)),
                ('feedstock_misc', models.CharField(blank=True, max_length=100, null=True)),
                ('facility_location', models.CharField(blank=True, max_length=100, null=True)),
                ('facility_nameplate', models.IntegerField(blank=True, null=True)),
                ('feedstock_transport_mode', models.CharField(blank=True, max_length=100, null=True)),
                ('fuel_transport_mode', models.CharField(blank=True, max_length=100, null=True)),
                ('former_company', models.CharField(blank=True, max_length=100, null=True)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelcode_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelcode_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fuel_code',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='FuelCodeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('status', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelcodestatus_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelcodestatus_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fuel_code_status',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='api.fuelcodestatus'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='fuelcode',
            name='carbon_intensity',
            field=models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=5, null=True),
        ),
        migrations.AddField(
            model_name='fuelcodestatus',
            name='effective_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fuelcodestatus',
            name='expiration_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='ApprovedFuel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuel_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuel_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'approved_fuel_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='TransportMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_transportmode_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_transportmode_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fuel_transport_mode',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='fuelcode',
            name='feedstock_transport_mode',
        ),
        migrations.AlterField(
            model_name='fuelcode',
            name='fuel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel'),
        ),
        migrations.RemoveField(
            model_name='fuelcode',
            name='fuel_transport_mode',
        ),
        migrations.CreateModel(
            name='FuelTransportMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fueltransportmode_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelcode')),
                ('transport_mode', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.transportmode')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fueltransportmode_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fuel_transport_mode_fuel_code',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='FeedstockTransportMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_feedstocktransportmode_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelcode')),
                ('transport_mode', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.transportmode')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_feedstocktransportmode_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'feedstock_transport_mode_fuel_code',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='feedstock_transport_mode',
            field=models.ManyToManyField(related_name='_fuelcode_feedstock_transport_mode_+', through='api.FeedstockTransportMode', to='api.TransportMode'),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='fuel_transport_mode',
            field=models.ManyToManyField(related_name='_fuelcode_fuel_transport_mode_+', through='api.FuelTransportMode', to='api.TransportMode'),
        ),
        migrations.AlterModelTable(
            name='approvedfuel',
            table='approved_fuel_type',
        ),
        migrations.AlterModelTable(
            name='transportmode',
            table='fuel_transport_mode_type',
        ),
        migrations.AddField(
            model_name='usercreationrequest',
            name='external_username',
            field=models.CharField(blank=True, max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='usercreationrequest',
            name='keycloak_email',
            field=models.EmailField(max_length=254),
        ),
        migrations.AlterUniqueTogether(
            name='usercreationrequest',
            unique_together={('keycloak_email', 'external_username')},
        ),
        migrations.AlterField(
            model_name='user',
            name='cell_phone',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='fuel_code_version',
            field=models.IntegerField(default=100),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='fuelcode',
            name='fuel_code',
            field=models.CharField(default='BCLCF', max_length=10),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='fuel_code_version_minor',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterUniqueTogether(
            name='fuelcode',
            unique_together={('fuel_code', 'fuel_code_version', 'fuel_code_version_minor')},
        ),
        migrations.AlterField(
            model_name='credittrade',
            name='fair_market_value_per_credit',
            field=models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=10, null=True, validators=[api.validators.CreditTradeFairMarketValueValidator]),
        ),
        migrations.CreateModel(
            name='FuelClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('fuel_class', models.CharField(max_length=50, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelclass_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_fuelclass_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fuel_class',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CarbonIntensityLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('density', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=5, null=True)),
                ('compliance_period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='carbon_intensity_limits', to='api.complianceperiod')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_carbonintensitylimit_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='carbon_intensity_limits', to='api.fuelclass')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_carbonintensitylimit_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carbon_intensity_limit',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='credit_calculation_only',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='EnergyEffectivenessRatio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('ratio', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=5, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energyeffectivenessratio_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='energy_effective_ratio', to='api.approvedfuel')),
                ('fuel_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='energy_effective_ratio', to='api.fuelclass')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energyeffectivenessratio_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'energy_effectiveness_ratio',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DefaultCarbonIntensity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('density', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=5, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_defaultcarbonintensity_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='default_carbon_intensity', to='api.approvedfuel')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_defaultcarbonintensity_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'default_carbon_intensity',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_unitofmeasure_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_unitofmeasure_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'unit_of_measure',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='EnergyDensity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('density', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energydensity_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='energy_density', to='api.approvedfuel')),
                ('unit_of_measure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='energy_density', to='api.unitofmeasure')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energydensity_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'energy_density',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='energydensity',
            name='unit_of_measure',
        ),
        migrations.CreateModel(
            name='DefaultCarbonIntensityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_defaultcarbonintensitycategory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_defaultcarbonintensitycategory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'default_carbon_intensity_category',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='EnergyDensityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energydensitycategory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energydensitycategory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'energy_density_category',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='EnergyEffectivenessRatioCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energyeffectivenessratiocategory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_energyeffectivenessratiocategory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'energy_effectiveness_ratio_category',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='defaultcarbonintensity',
            name='fuel',
        ),
        migrations.RemoveField(
            model_name='energydensity',
            name='fuel',
        ),
        migrations.RemoveField(
            model_name='energyeffectivenessratio',
            name='fuel',
        ),
        migrations.AddField(
            model_name='defaultcarbonintensity',
            name='category',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, related_name='default_carbon_intensity', to='api.defaultcarbonintensitycategory'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='energydensity',
            name='category',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, related_name='energy_density', to='api.energydensitycategory'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='energyeffectivenessratio',
            name='category',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, related_name='energy_effective_ratio', to='api.energyeffectivenessratiocategory'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='default_carbon_intensity_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel', to='api.defaultcarbonintensitycategory'),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='energy_density_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel', to='api.energydensitycategory'),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='energy_effectiveness_ratio_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel', to='api.energyeffectivenessratiocategory'),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='unit_of_measure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel', to='api.unitofmeasure'),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='description',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.CreateModel(
            name='ApprovedFuelClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuelclass_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel_class', to='api.approvedfuel')),
                ('fuel_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='approved_fuel_class', to='api.fuelclass')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuelclass_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'approved_fuel_class',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='defaultcarbonintensitycategory',
            name='effective_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='defaultcarbonintensitycategory',
            name='expiration_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='energydensitycategory',
            name='effective_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='energydensitycategory',
            name='expiration_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='energyeffectivenessratiocategory',
            name='effective_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='energyeffectivenessratiocategory',
            name='expiration_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='approvedfuel',
            name='is_partially_renewable',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='fuelcode',
            name='renewable_percentage',
            field=models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=5, null=True),
        ),
        migrations.CreateModel(
            name='PetroleumCarbonIntensityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_petroleumcarbonintensitycategory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_petroleumcarbonintensitycategory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'petroleum_carbon_intensity_category',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='PetroleumCarbonIntensity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('density', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=5, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='petroleum_carbon_intensity', to='api.petroleumcarbonintensitycategory')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_petroleumcarbonintensity_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_petroleumcarbonintensity_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'petroleum_carbon_intensity',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ExpectedUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('description', models.CharField(max_length=100, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_expecteduse_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_expecteduse_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'expected_use_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='AutosavedFormData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=256, verbose_name='key')),
                ('data', models.TextField(null=True, verbose_name='data')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('last_access', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last_access')),
            ],
            options={
                'db_table': 'autosaved_form_data',
                'unique_together': {('user', 'key')},
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ComplianceReportStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportstatus_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportstatus_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_report_status',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ComplianceReportType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_order', models.IntegerField()),
                ('the_type', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000)),
            ],
            options={
                'db_table': 'compliance_report_type',
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('compliance_period', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.complianceperiod')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereport_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.organization')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.compliancereportstatus')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.compliancereporttype')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereport_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_report',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ScheduleC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'compliance_report_schedule_c',
            },
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='schedule_c',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_report', to='api.schedulec'),
        ),
        migrations.CreateModel(
            name='ScheduleCRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records', to='api.schedulec')),
                ('expected_use', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.expecteduse')),
                ('fuel_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelclass')),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=20)),
                ('rationale', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'compliance_report_schedule_c_record',
            },
        ),
        migrations.CreateModel(
            name='NotionalTransferType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('the_type', models.CharField(max_length=25, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notionaltransfertype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_notionaltransfertype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notional_transfer_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ApprovedFuelProvision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuelprovision_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel')),
            ],
            options={
                'db_table': 'approved_fuel_provision',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CarbonIntensityDeterminationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('the_type', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_carbonintensitydeterminationtype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_carbonintensitydeterminationtype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carbon_intensity_determination_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ProvisionOfTheAct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_provisionoftheact_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('determination_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fuel_provision', to='api.carbonintensitydeterminationtype')),
                ('fuel', models.ManyToManyField(through='api.ApprovedFuelProvision', to='api.ApprovedFuel')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_provisionoftheact_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fuel_provisions',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='approvedfuelprovision',
            name='provision',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.provisionoftheact'),
        ),
        migrations.AddField(
            model_name='approvedfuelprovision',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_approvedfuelprovision_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='approvedfuelprovision',
            unique_together={('fuel', 'provision')},
        ),
        migrations.AlterModelTable(
            name='carbonintensitydeterminationtype',
            table='determination_type',
        ),
        migrations.AlterModelTable(
            name='provisionoftheact',
            table='fuel_provision',
        ),
        
        migrations.AddField(
            model_name='approvedfuelprovision',
            name='determination_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.carbonintensitydeterminationtype'),
        ),
        migrations.AddField(
            model_name='provisionoftheact',
            name='provision',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='approvedfuelprovision',
            unique_together={('fuel', 'provision', 'determination_type')},
        ),
        migrations.AlterField(
            model_name='provisionoftheact',
            name='determination_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='provision_act', to='api.carbonintensitydeterminationtype'),
        ),
        migrations.AlterModelTable(
            name='approvedfuelprovision',
            table='carbon_intensity_fuel_determination',
        ),
        migrations.AlterModelTable(
            name='provisionoftheact',
            table='provision_act',
        ),
        migrations.RemoveField(
            model_name='carbonintensitydeterminationtype',
            name='description',
        ),
        migrations.AlterField(
            model_name='approvedfuelprovision',
            name='determination_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.carbonintensitydeterminationtype'),
        ),
        migrations.AlterField(
            model_name='provisionoftheact',
            name='provision',
            field=models.CharField(max_length=100),
        ),
        migrations.RemoveField(
            model_name='provisionoftheact',
            name='determination_type',
        ),
        migrations.RenameField(
            model_name='approvedfuelprovision',
            old_name='provision',
            new_name='provision_act',
        ),
        migrations.AlterUniqueTogether(
            name='approvedfuelprovision',
            unique_together={('fuel', 'provision_act', 'determination_type')},
        ),
        migrations.AddField(
            model_name='carbonintensitydeterminationtype',
            name='fuel',
            field=models.ManyToManyField(through='api.ApprovedFuelProvision', to='api.ApprovedFuel'),
        ),
        migrations.AddField(
            model_name='carbonintensitydeterminationtype',
            name='provision_act',
            field=models.ManyToManyField(through='api.ApprovedFuelProvision', to='api.ProvisionOfTheAct'),
        ),
        migrations.CreateModel(
            name='ScheduleA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'compliance_report_schedule_a',
            },
        ),
        migrations.CreateModel(
            name='ScheduleARecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=20)),
                ('trading_partner', models.CharField(max_length=200)),
                ('postal_address', models.CharField(max_length=200)),
                ('fuel_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelclass')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records', to='api.schedulea')),
                ('transfer_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.notionaltransfertype')),
            ],
            options={
                'db_table': 'compliance_report_schedule_a_record',
            },
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='schedule_a',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_report', to='api.schedulea'),
        ),
        migrations.CreateModel(
            name='ScheduleB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'compliance_report_schedule_b',
            },
        ),
        migrations.AlterField(
            model_name='provisionoftheact',
            name='description',
            field=models.CharField(blank=True, max_length=1000),
        ),
        migrations.AlterField(
            model_name='provisionoftheact',
            name='provision',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.CreateModel(
            name='ScheduleBRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=20)),
                ('fuel_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelclass')),
                ('fuel_code', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.fuelcode')),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel')),
                ('provision_of_the_act', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.provisionoftheact')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records', to='api.scheduleb')),
            ],
            options={
                'db_table': 'compliance_report_schedule_b_record',
            },
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='schedule_b',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_report', to='api.scheduleb'),
        ),
        migrations.RemoveField(
            model_name='organizationaddress',
            name='primary',
        ),
        migrations.CreateModel(
            name='ScheduleD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'compliance_report_schedule_d',
            },
        ),
        migrations.CreateModel(
            name='ScheduleDSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedstock', models.CharField(blank=True, max_length=100, null=True)),
                ('fuel_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.fuelclass')),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sheets', to='api.scheduled')),
            ],
            options={
                'db_table': 'compliance_report_schedule_d_sheet',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='schedule_d',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_report', to='api.scheduled'),
        ),
        migrations.CreateModel(
            name='ScheduleSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gasoline_class_retained', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('gasoline_class_deferred', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('diesel_class_retained', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('diesel_class_deferred', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('credits_offset', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compliance_report_summary',
            },
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='summary',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_report', to='api.schedulesummary'),
        ),
        migrations.AddField(
            model_name='credittradecomment',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ScheduleDSheetOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intensity', models.DecimalField(blank=True, decimal_places=50, default=Decimal('0.00'), max_digits=100, null=True)),
                ('description', models.CharField(blank=True, choices=[(api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['DISPENSING'], 'DISPENSING'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['DISTRIBUTION'], 'DISTRIBUTION'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['PRODUCTION'], 'PRODUCTION'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['FEEDSTOCK_TRANSMISSION'], 'FEEDSTOCK_TRANSMISSION'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['FEEDSTOCK_RECOVERY'], 'FEEDSTOCK_RECOVERY'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['FEEDSTOCK_UPGRADING'], 'FEEDSTOCK_UPGRADING'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['LAND_USE_CHANGE'], 'LAND_USE_CHANGE'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['FERTILIZER'], 'FERTILIZER'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['GAS_LEAKS_AND_FLARES'], 'GAS_LEAKS_AND_FLARES'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['CO2_AND_H2S_REMOVED'], 'CO2_AND_H2S_REMOVED'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['EMISSIONS_DISPLACED'], 'EMISSIONS_DISPLACED'), (api.models.ComplianceReportSchedules.ScheduleDSheetOutput.OutputCells['FUEL_USE_HIGH_HEATING_VALUE'], 'FUEL_USE_HIGH_HEATING_VALUE')], max_length=100, null=True)),
                ('sheet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='outputs', to='api.scheduledsheet')),
            ],
            options={
                'db_table': 'compliance_report_schedule_d_sheet_output',
                'unique_together': {('description', 'sheet')},
            },
        ),
        migrations.AlterModelOptions(
            name='schedulearecord',
            options={'ordering': ['id']},
        ),
        migrations.AlterModelOptions(
            name='schedulebrecord',
            options={'ordering': ['id']},
        ),
        migrations.AlterModelOptions(
            name='schedulecrecord',
            options={'ordering': ['id']},
        ),
        migrations.CreateModel(
            name='ScheduleDSheetInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worksheet_name', models.CharField(blank=True, max_length=100, null=True)),
                ('cell', models.CharField(blank=True, max_length=100, null=True)),
                ('value', models.CharField(blank=True, max_length=100, null=True)),
                ('units', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('sheet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inputs', to='api.scheduledsheet')),
            ],
            options={
                'db_table': 'compliance_report_schedule_d_sheet_input',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='schedulebrecord',
            name='intensity',
            field=models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=5, null=True),
        ),
        migrations.AddField(
            model_name='schedulebrecord',
            name='schedule_d_sheet_index',
            field=models.IntegerField(default=None, null=True),
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('display_order', models.IntegerField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('the_type', models.CharField(max_length=25, unique=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_transactiontype_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_transactiontype_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transaction_type',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='signingauthorityassertion',
            name='module',
            field=models.CharField(choices=[(api.models.SigningAuthorityAssertion.SigningAuthorityAssertion.AssertionModules['CREDIT_TRADE'], 'CREDIT_TRADE'), (api.models.SigningAuthorityAssertion.SigningAuthorityAssertion.AssertionModules['COMPLIANCE_REPORTING'], 'COMPLIANCE_REPORTING')], default='credit_trade', max_length=50),
        ),
        migrations.AddField(
            model_name='signingauthorityconfirmation',
            name='compliance_report',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='confirmations', to='api.compliancereport'),
        ),
        migrations.AlterField(
            model_name='signingauthorityconfirmation',
            name='credit_trade',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='confirmations', to='api.credittrade'),
        ),
        migrations.CreateModel(
            name='ComplianceReportHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('compliance_report', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='compliance_reports', to='api.compliancereport')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereporthistory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='compliance_reports', to='api.compliancereportstatus')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereporthistory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
                ('user_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_reports', to='api.role')),
            ],
            options={
                'db_table': 'compliance_report_history',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='signingauthorityconfirmation',
            name='title',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_a',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulea'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_b',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.scheduleb'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_c',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulec'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_d',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.scheduled'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='summary',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulesummary'),
        ),
        migrations.CreateModel(
            name='ComplianceReportSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('snapshot', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('compliance_report', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.compliancereport')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportsnapshot_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportsnapshot_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_report_snapshot',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ComplianceReportWorkflowState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('analyst_status', models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.compliancereportstatus', to_field='status')),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportworkflowstate_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('director_status', models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.compliancereportstatus', to_field='status')),
                ('fuel_supplier_status', models.ForeignKey(default='Draft', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.compliancereportstatus', to_field='status')),
                ('manager_status', models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.compliancereportstatus', to_field='status')),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereportworkflowstate_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_report_workflow_state',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.RemoveField(
            model_name='compliancereport',
            name='status',
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='status',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='compliance_report', to='api.compliancereportworkflowstate'),
        ),
        migrations.AlterField(
            model_name='compliancereporthistory',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='history_records', to='api.compliancereportworkflowstate'),
        ),
        migrations.CreateModel(
            name='ExclusionAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'compliance_report_exclusion_agreement',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ExclusionAgreementRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_partner', models.CharField(max_length=200)),
                ('postal_address', models.CharField(max_length=200)),
                ('quantity', models.DecimalField(decimal_places=0, max_digits=15)),
                ('quantity_not_sold', models.DecimalField(decimal_places=0, max_digits=15)),
                ('exclusion_agreement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records', to='api.exclusionagreement')),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.approvedfuel')),
                ('transaction_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.transactiontype')),
            ],
            options={
                'db_table': 'compliance_report_exclusion_agreement_record',
                'ordering': ['id'],
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_a',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulea'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_b',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.scheduleb'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_c',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulec'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='schedule_d',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.scheduled'),
        ),
        migrations.AlterField(
            model_name='compliancereport',
            name='summary',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.schedulesummary'),
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='exclusion_agreement',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_report', to='api.exclusionagreement'),
        ),
        migrations.AddField(
            model_name='documentfileattachment',
            name='scan_resubmit_ttl',
            field=models.IntegerField(default=200),
        ),
        migrations.AlterField(
            model_name='compliancereportstatus',
            name='status',
            field=models.CharField(blank=True, max_length=25, unique=True),
        ),
        migrations.AlterField(
            model_name='signingauthorityassertion',
            name='module',
            field=models.CharField(choices=[(api.models.SigningAuthorityAssertion.SigningAuthorityAssertion.AssertionModules['CREDIT_TRADE'], 'CREDIT_TRADE'), (api.models.SigningAuthorityAssertion.SigningAuthorityAssertion.AssertionModules['COMPLIANCE_REPORTING'], 'COMPLIANCE_REPORTING'), (api.models.SigningAuthorityAssertion.SigningAuthorityAssertion.AssertionModules['EXCLUSION_REPORTS'], 'EXCLUSION_REPORTS')], default='credit_trade', max_length=50),
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='credit_transaction',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='compliance_report', to='api.credittrade'),
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='supplements',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='supplemental_reports', to='api.compliancereport'),
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='nickname',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='related_report',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.compliancereport'),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[(api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_CREATED'], 'Credit Transfer Proposal Created'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_1OF2'], 'Credit Transfer Proposal Signed 1/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_SIGNED_2OF2'], 'Credit Transfer Proposal Signed 2/2'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_REFUSED'], 'Credit Transfer Proposal Refused'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_PROPOSAL_ACCEPTED'], 'Credit Transfer Proposal Accepted'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL'], 'Credit Transfer Proposal Recommended For Approval'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION'], 'Credit Transfer Proposal Recommended For Declination'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_DECLINED'], 'Credit Transfer Proposal Declined'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_APPROVED'], 'Credit Transfer Proposal Approved'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_RESCINDED'], 'Credit Transfer Proposal Rescinded'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_COMMENT'], 'Credit Transfer Proposal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['CREDIT_TRANSFER_INTERNAL_COMMENT'], 'Credit Transfer Proposal Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_CREATED'], 'PVR Created'), (api.notifications.notification_types.NotificationType['PVR_RECOMMENDED_FOR_APPROVAL'], 'PVR Recommended For Approval'), (api.notifications.notification_types.NotificationType['PVR_RESCINDED'], 'PVR Rescinded'), (api.notifications.notification_types.NotificationType['PVR_PULLED_BACK'], 'PVR Pulled Back'), (api.notifications.notification_types.NotificationType['PVR_DECLINED'], 'PVR Declined'), (api.notifications.notification_types.NotificationType['PVR_APPROVED'], 'PVR Approved'), (api.notifications.notification_types.NotificationType['PVR_COMMENT'], 'PVR Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_INTERNAL_COMMENT'], 'PVR Internal Comment Created Or Updated'), (api.notifications.notification_types.NotificationType['PVR_RETURNED_TO_ANALYST'], 'PVR Returned to Analyst'), (api.notifications.notification_types.NotificationType['DOCUMENT_PENDING_SUBMISSION'], 'Document Pending Submission'), (api.notifications.notification_types.NotificationType['DOCUMENT_SUBMITTED'], 'Document Submitted'), (api.notifications.notification_types.NotificationType['DOCUMENT_SCAN_FAILED'], 'Document Security Scan Failed'), (api.notifications.notification_types.NotificationType['DOCUMENT_RECEIVED'], 'Document Received'), (api.notifications.notification_types.NotificationType['DOCUMENT_ARCHIVED'], 'Document Archived'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_DRAFT'], 'Compliance Report Draft Saved'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_SUBMITTED'], 'Compliance Report Submitted'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST'], 'Compliance Report Recommended for Acceptance - Analyst'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST'], 'Compliance Report Recommended for Rejection - Analyst'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER'], 'Compliance Report Recommended for Acceptance - Manager'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER'], 'Compliance Report Recommended for Rejection - Manager'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_ACCEPTED'], 'Compliance Report Accepted'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_REJECTED'], 'Compliance Report Rejected'), (api.notifications.notification_types.NotificationType['COMPLIANCE_REPORT_REQUESTED_SUPPLEMENTAL'], 'Compliance Report Requested Supplemental'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_DRAFT'], 'Exclusion Report Draft Saved'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_SUBMITTED'], 'Exclusion Report Submitted'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST'], 'Exclusion Report Recommended for Acceptance - Analyst'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST'], 'Exclusion Report Recommended for Rejection - Analyst'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER'], 'Exclusion Report Recommended for Acceptance - Manager'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER'], 'Exclusion Report Recommended for Rejection - Manager'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_ACCEPTED'], 'Exclusion Report Accepted'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_REJECTED'], 'Exclusion Report Rejected'), (api.notifications.notification_types.NotificationType['EXCLUSION_REPORT_REQUESTED_SUPPLEMENTAL'], 'Exclusion Report Requested Supplemental')], max_length=128),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='create_timestamp',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='create_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereporttype_CREATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='effective_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='expiration_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='update_timestamp',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='compliancereporttype',
            name='update_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_compliancereporttype_UPDATE_USER', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compliancereport',
            name='supplemental_note',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='role',
            name='default_role',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='diesel_class_obligation',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='diesel_class_previously_retained',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='gasoline_class_obligation',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='gasoline_class_previously_retained',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True),
        ),
        migrations.AddField(
            model_name='document',
            name='milestone',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='documenthistory',
            name='milestone',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.DeleteModel(
            name='DocumentMilestone',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_snapshot',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='document',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='document_file',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='fuel_code',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='notification_message',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_summary',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_summary',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_a',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_a_record',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_b',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_b_record',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_c',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_c_record',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_d',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_d_sheet',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_d_sheet_input',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_schedule_d_sheet_output',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_exclusion_agreement',
        ),
        api.migrations.operations.trigger_operation.AuditTable(
            table='compliance_report_exclusion_agreement_record',
        ),
        migrations.AlterUniqueTogether(
            name='fuelcode',
            unique_together={('fuel_code', 'fuel_code_version', 'fuel_code_version_minor', 'status')},
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='credits_offset_a',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='credits_offset_b',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='compliancereportsnapshot',
            name='compliance_report',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='api.compliancereport'),
        ),
        migrations.AlterField(
            model_name='compliancereportsnapshot',
            name='snapshot',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, null=True),
        ),
        migrations.AlterField(
            model_name='compliancereportworkflowstate',
            name='analyst_status',
            field=models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.compliancereportstatus', to_field='status'),
        ),
        migrations.AlterField(
            model_name='compliancereportworkflowstate',
            name='director_status',
            field=models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.compliancereportstatus', to_field='status'),
        ),
        migrations.AlterField(
            model_name='compliancereportworkflowstate',
            name='fuel_supplier_status',
            field=models.ForeignKey(default='Draft', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.compliancereportstatus', to_field='status'),
        ),
        migrations.AlterField(
            model_name='compliancereportworkflowstate',
            name='manager_status',
            field=models.ForeignKey(default='Unreviewed', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.compliancereportstatus', to_field='status'),
        ),
        migrations.AlterField(
            model_name='documenttype',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='types', to='api.documentcategory'),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='user',
            name='keycloak_user_id',
            field=models.CharField(blank=True, max_length=150, null=True),
        ),
        migrations.CreateModel(
            name='UserLoginHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('keycloak_email', models.EmailField(max_length=254)),
                ('external_username', models.CharField(blank=True, max_length=150, null=True)),
                ('keycloak_user_id', models.CharField(blank=True, max_length=150, null=True)),
                ('is_login_successful', models.BooleanField(default=False)),
                ('login_error_message', models.CharField(blank=True, max_length=500, null=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_userloginhistory_CREATE_USER', to=settings.AUTH_USER_MODEL)),
                ('update_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_userloginhistory_UPDATE_USER', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_login_history',
            },
            bases=(models.Model, db_comments.model_mixins.DBComments),
        ),
        migrations.AlterField(
            model_name='scheduledsheetinput',
            name='description',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='scheduledsheetinput',
            name='value',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.RunSQL(
            sql="UPDATE organization_address SET address_line_2 = address_line_2 || ' ' || address_line_3;",
        ),
        migrations.RunSQL(
            sql="UPDATE organization_address SET state = state || ' ' || county",
        ),
        migrations.RemoveField(
            model_name='organizationaddress',
            name='address_line_3',
        ),
        migrations.RemoveField(
            model_name='organizationaddress',
            name='county',
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_address_other',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_city',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_country',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_postal_code',
            field=models.CharField(blank=True, max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_province',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_representativename',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='organizationaddress',
            name='attorney_street_address',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='schedulesummary',
            name='credits_offset_c',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='notificationsubscription',
            name='notification_type',
            field=models.CharField(choices=[('NotificationType.CREDIT_TRANSFER_CREATED', 'Credit Transfer Proposal Created'), ('NotificationType.CREDIT_TRANSFER_SIGNED_1OF2', 'Credit Transfer Proposal Signed 1/2'), ('NotificationType.CREDIT_TRANSFER_SIGNED_2OF2', 'Credit Transfer Proposal Signed 2/2'), ('NotificationType.CREDIT_TRANSFER_PROPOSAL_REFUSED', 'Credit Transfer Proposal Refused'), ('NotificationType.CREDIT_TRANSFER_PROPOSAL_ACCEPTED', 'Credit Transfer Proposal Accepted'), ('NotificationType.CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL', 'Credit Transfer Proposal Recommended For Approval'), ('NotificationType.CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION', 'Credit Transfer Proposal Recommended For Declination'), ('NotificationType.CREDIT_TRANSFER_DECLINED', 'Credit Transfer Proposal Declined'), ('NotificationType.CREDIT_TRANSFER_APPROVED', 'Credit Transfer Proposal Approved'), ('NotificationType.CREDIT_TRANSFER_RESCINDED', 'Credit Transfer Proposal Rescinded'), ('NotificationType.CREDIT_TRANSFER_COMMENT', 'Credit Transfer Proposal Comment Created Or Updated'), ('NotificationType.CREDIT_TRANSFER_INTERNAL_COMMENT', 'Credit Transfer Proposal Internal Comment Created Or Updated'), ('NotificationType.PVR_CREATED', 'PVR Created'), ('NotificationType.PVR_RECOMMENDED_FOR_APPROVAL', 'PVR Recommended For Approval'), ('NotificationType.PVR_RESCINDED', 'PVR Rescinded'), ('NotificationType.PVR_PULLED_BACK', 'PVR Pulled Back'), ('NotificationType.PVR_DECLINED', 'PVR Declined'), ('NotificationType.PVR_APPROVED', 'PVR Approved'), ('NotificationType.PVR_COMMENT', 'PVR Comment Created Or Updated'), ('NotificationType.PVR_INTERNAL_COMMENT', 'PVR Internal Comment Created Or Updated'), ('NotificationType.PVR_RETURNED_TO_ANALYST', 'PVR Returned to Analyst'), ('NotificationType.DOCUMENT_PENDING_SUBMISSION', 'Document Pending Submission'), ('NotificationType.DOCUMENT_SUBMITTED', 'Document Submitted'), ('NotificationType.DOCUMENT_SCAN_FAILED', 'Document Security Scan Failed'), ('NotificationType.DOCUMENT_RECEIVED', 'Document Received'), ('NotificationType.DOCUMENT_ARCHIVED', 'Document Archived'), ('NotificationType.COMPLIANCE_REPORT_DRAFT', 'Compliance Report Draft Saved'), ('NotificationType.COMPLIANCE_REPORT_SUBMITTED', 'Compliance Report Submitted'), ('NotificationType.COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST', 'Compliance Report Recommended for Acceptance - Analyst'), ('NotificationType.COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST', 'Compliance Report Recommended for Rejection - Analyst'), ('NotificationType.COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER', 'Compliance Report Recommended for Acceptance - Manager'), ('NotificationType.COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER', 'Compliance Report Recommended for Rejection - Manager'), ('NotificationType.COMPLIANCE_REPORT_ACCEPTED', 'Compliance Report Accepted'), ('NotificationType.COMPLIANCE_REPORT_REJECTED', 'Compliance Report Rejected'), ('NotificationType.COMPLIANCE_REPORT_REQUESTED_SUPPLEMENTAL', 'Compliance Report Requested Supplemental'), ('NotificationType.EXCLUSION_REPORT_DRAFT', 'Exclusion Report Draft Saved'), ('NotificationType.EXCLUSION_REPORT_SUBMITTED', 'Exclusion Report Submitted'), ('NotificationType.EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST', 'Exclusion Report Recommended for Acceptance - Analyst'), ('NotificationType.EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST', 'Exclusion Report Recommended for Rejection - Analyst'), ('NotificationType.EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER', 'Exclusion Report Recommended for Acceptance - Manager'), ('NotificationType.EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER', 'Exclusion Report Recommended for Rejection - Manager'), ('NotificationType.EXCLUSION_REPORT_ACCEPTED', 'Exclusion Report Accepted'), ('NotificationType.EXCLUSION_REPORT_REJECTED', 'Exclusion Report Rejected'), ('NotificationType.EXCLUSION_REPORT_REQUESTED_SUPPLEMENTAL', 'Exclusion Report Requested Supplemental')], max_length=128),
        ),
    ]
