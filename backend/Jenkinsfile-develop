def tfrs_release='v1.2.18'
def result = 0
stage('Unit Test') {
    podTemplate(label: "develop-backend-python-${env.BUILD_NUMBER}", name: "develop-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ){
        node("develop-backend-python-${env.BUILD_NUMBER}") {
            
            checkout scm
            dir('backend') {
                try {
                    sh 'pip install --upgrade pip && pip install -r requirements.txt'
                    sh 'python manage.py collectstatic && python manage.py migrate'
                    sh 'python manage.py test -c nose.cfg'
                } catch(Throwable t) {
                    result = 1;
                } finally {
                    stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                    junit 'nosetests.xml'
                }
            }
            
        } //end node
    } //end podTemplate
} //end of stage

echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}
        
podTemplate(label: "develop-backend-maven-${env.BUILD_NUMBER}", name: "develop-backend-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {
node("develop-backend-maven-${env.BUILD_NUMBER}") {

    stage('Code Quality Check') {
        checkout scm
        echo('Quality Check')
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_URL: ${SONARQUBE_URL}"

        dir('backend/sonar-runner') {
            unstash 'coverage'
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
    }

    stage('Build-Backend') {
        openshiftBuild bldCfg: 'tfrs-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_BACKEND = sh (
            script: 'oc get istag tfrs-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_BACKEND: $IMAGE_HASH_BACKEND"
    }

    stage('Build-Scan-Coordinator') {
        openshiftBuild bldCfg: 'scan-coordinator-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_COORDINATOR = sh (
            script: 'oc get istag scan-coordinator-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_COORDINATOR: $IMAGE_HASH_SCAN_COORDINATOR"
    }

    stage('Build-Scan-Handler') {
        openshiftBuild bldCfg: 'scan-handler-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_HANDLER = sh (
            script: 'oc get istag scan-handler-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_HANDLER: $IMAGE_HASH_SCAN_HANDLER"
    }

    stage('Build-Celery') {
        openshiftBuild bldCfg: 'celery-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_CELERY = sh (
            script: 'oc get istag celery-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_CELERY: $IMAGE_HASH_CELERY"
    }

    stage('Datebase Backup') {
        postgresql_pod_name=sh (script: 'oc get pods -n mem-tfrs-dev | grep postgresql96 | awk \'{print $1}\'', returnStdout: true).trim()
        echo "start backup script tfrsdump-dev.sh on dev, postgresql_pod_name is ${postgresql_pod_name}"
        sh returnStdout: true, script: "oc exec ${postgresql_pod_name} -c postgresql96 -n mem-tfrs-dev -- bash /postgresql-backup/tfrs-backup.sh ${tfrs_release} dev"
        echo 'backup script completed'
    }

    stage('Bring up Maintenance Page') {
        sh returnStatus: true, script: "oc scale dc maintenance-page -n mem-tfrs-dev --replicas=1 --timeout=20s"
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-frontend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-backend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
    }

    stage('Deploy on Dev') {
        echo "Deploying to Dev: ${BUILD_ID}"
        openshiftTag destStream: 'tfrs-develop', verbose: 'true', destTag: 'dev', srcStream: 'tfrs-develop', srcTag: "${IMAGE_HASH_BACKEND}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-coordinator-develop', verbose: 'true', destTag: 'dev', srcStream: 'scan-coordinator-develop', srcTag: "${IMAGE_HASH_SCAN_COORDINATOR}"
        openshiftVerifyDeployment depCfg: 'scan-coordinator', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-handler-develop', verbose: 'true', destTag: 'dev', srcStream: 'scan-handler-develop', srcTag: "${IMAGE_HASH_SCAN_HANDLER}"
        openshiftVerifyDeployment depCfg: 'scan-handler', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'celery-develop', verbose: 'true', destTag: 'dev', srcStream: 'celery-develop', srcTag: "${IMAGE_HASH_CELERY}"
        openshiftVerifyDeployment depCfg: 'celery', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
    }

    stage('Refresh SchemaSpy') {
        echo "Refreshing SchemaSpy for Dev Database"
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-dev', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-dev', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
    }    

} //endo of node
} //end of podTemplate
