def result = 0;
stage('Unit Test') {
    podTemplate(label: "master-backend-python-${env.BUILD_NUMBER}", name: "master-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ){
    node("master-backend-python-${env.BUILD_NUMBER}") {
        checkout scm
        dir('backend') {
            try {
                sh 'pip install --upgrade pip && pip install -r requirements.txt'
                sh 'python manage.py collectstatic && python manage.py migrate'
                sh 'python manage.py test -c nose.cfg'
            } catch(Throwable t) {
                result = 1;
            } finally {
                stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                junit 'nosetests.xml'
            }
        }
    } //end of node
    } //end of podTemplate
} //end of stage
        
echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}
        
podTemplate(label: "master-backend-maven-${env.BUILD_NUMBER}", name: "master-backend-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {
node("master-backend-maven-${env.BUILD_NUMBER}") {
    
    stage('Build Backend') {
        openshiftBuild bldCfg: 'tfrs', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_BACKEND = sh (
            script: 'oc get istag tfrs:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_BACKEND: $IMAGE_HASH_BACKEND"
    }

    stage('Build-Scan-Coordinator') {
        openshiftBuild bldCfg: 'scan-coordinator', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_COORDINATOR = sh (
            script: 'oc get istag scan-coordinator:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_COORDINATOR: $IMAGE_HASH_SCAN_COORDINATOR"
    }

    stage('Build-Scan-Handler') {
        openshiftBuild bldCfg: 'scan-handler', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_HANDLER = sh (
            script: 'oc get istag scan-handler:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_HANDLER: $IMAGE_HASH_SCAN_HANDLER"
    }

    stage('Build-Celery') {
        openshiftBuild bldCfg: 'celery', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_CELERY = sh (
            script: 'oc get istag celery:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_CELERY: $IMAGE_HASH_CELERY"
    }

    stage('Deploy to Test') {
        input "Deploy to Test?"
        input "Reminder of full datase backup and point in time backup have been done."
        input "Deploy to Test? This is the last confirmation required."
        echo "Deploying to Test: ${BUILD_ID}"
        openshiftTag destStream: 'tfrs', verbose: 'true', destTag: 'test', srcStream: 'tfrs', srcTag: "${IMAGE_HASH_BACKEND}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-coordinator', verbose: 'true', destTag: 'test', srcStream: 'scan-coordinator', srcTag: "${IMAGE_HASH_SCAN_COORDINATOR}"
        openshiftVerifyDeployment depCfg: 'scan-coordinator', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-handler', verbose: 'true', destTag: 'test', srcStream: 'scan-handler', srcTag: "${IMAGE_HASH_SCAN_HANDLER}"
        openshiftVerifyDeployment depCfg: 'scan-handler', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'celery', verbose: 'true', destTag: 'test', srcStream: 'celery', srcTag: "${IMAGE_HASH_CELERY}"
        openshiftVerifyDeployment depCfg: 'celery', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
    }
    
    stage('Refresh SchemaSpy Test') {
        echo "Refreshing SchemaSpy for Test Database"
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-test', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-test', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
    }    
    
    stage('Deploy to Prod') {
        input "Deploy to Prod?"
        input "Reminder of full datase backup and point in time backup have been done."
        input "Deploy to Prod? Please confirm again."
        input "Deploy to Prod? This is the last confirmation required."
        echo "Deploying to Prod: ${BUILD_ID}"
        openshiftTag destStream: 'tfrs', verbose: 'true', destTag: 'prod', srcStream: 'tfrs', srcTag: "${IMAGE_HASH_BACKEND}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-coordinator', verbose: 'true', destTag: 'prod', srcStream: 'scan-coordinator', srcTag: "${IMAGE_HASH_SCAN_COORDINATOR}"
        openshiftVerifyDeployment depCfg: 'scan-coordinator', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'scan-handler', verbose: 'true', destTag: 'prod', srcStream: 'scan-handler', srcTag: "${IMAGE_HASH_SCAN_HANDLER}"
        openshiftVerifyDeployment depCfg: 'scan-handler', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'celery', verbose: 'true', destTag: 'prod', srcStream: 'celery', srcTag: "${IMAGE_HASH_CELERY}"
        openshiftVerifyDeployment depCfg: 'celery', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
    }    
    
    stage('Refresh SchemaSpy Prod') {
        echo "Refreshing SchemaSpy for Test Database"
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-prod', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-prod', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 5s'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true'
        sh 'sleep 10s'
    }    

} //end of node
} //end of podTemplate
