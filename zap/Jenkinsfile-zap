stage('ZAP Security Scan') {
    podTemplate(label: "develop-zap-${env.BUILD_NUMBER}", name: "develop-zap-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-zap',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ){
    node("develop-zap-${env.BUILD_NUMBER}") {
        stage('Scan Web Application') {
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm
            dir('zap') {
                sh 'sleep 3m'
                def retVal = sh returnStatus: true, script: '/zap/zap-x.sh -last_scan_report /home/jenkins/workspace/mem-tfrs-tools/mem-tfrs-tools-zap-pipeline/zap/index.html -session /home/jenkins/workspace/mem-tfrs-tools/mem-tfrs-tools-zap-pipeline/zap/TFRS -cmd'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/home/jenkins/workspace/mem-tfrs-tools/mem-tfrs-tools-zap-pipeline/zap', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
                echo "Return value is: ${retVal}"
                }
        }
    }
    }
}
