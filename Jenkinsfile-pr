import groovy.json.JsonOutput
import bcgov.GitHubHelper

// Notify stage status and pass to Jenkins-GitHub library
void notifyStageStatus (String name, String status) {
    GitHubHelper.createCommitStatus(
        this,
        GitHubHelper.getPullRequestLastCommitId(this),
        status,
        "${env.BUILD_URL}",
        "",
        "Stage: ${name}"
    )
}

// Create deployment status and pass to Jenkins-GitHub library
void createDeploymentStatus (String suffix, String status, String targetURL) {
    def ghDeploymentId = new GitHubHelper().createDeployment(
        this,
        "pull/${env.CHANGE_ID}/head",
        [
            'environment':"${suffix}",
            'task':"deploy:pull:${env.CHANGE_ID}"
        ]
    )

    new GitHubHelper().createDeploymentStatus(
        this,
        ghDeploymentId,
        "${status}",
        ['targetUrl':"${targetURL}"]
    )

    if ('SUCCESS'.equalsIgnoreCase("${status}")) {
        echo "${suffix} deployment successful!"
    } else if ('PENDING'.equalsIgnoreCase("${status}")){
        echo "${suffix} deployment pending."
    }
}

// Print stack trace of error
@NonCPS
private static String stackTraceAsString(Throwable t) {
    StringWriter sw = new StringWriter();
    t.printStackTrace(new PrintWriter(sw));
    return sw.toString()
}

pipeline {
  environment {

    APP_NAME = "tfrs"
    REPOSITORY = 'https://github.com/bcgov/tfrs.git'
    TFRS_SOURCE_REPO_URL='https://github.com/bcgov/tfrs.git'
    TFRS_SOURCE_REPO_REF="pull/${CHANGE_ID}/head"

    // TOOLS_PROJECT is where images are built
    TOOLS_PROJECT = "mem-tfrs-tools"

    // DEV_PROJECT is the project where individual development environments are spun up
    // for example: a pull request PR-999 will result in tfrs-dev-pr-999.pathfinder.gov.bc.ca
    DEV_PROJECT = "mem-tfrs-dev"
    DEV_SUFFIX = "dev"

    // TEST_PROJECT contains the test deployment. The test image is a candidate for promotion to prod.
    TEST_PROJECT = "mem-tfrs-test"
    TEST_SUFFIX = "staging"

    // PROD_PROJECT is the prod deployment.
    // New production images can be deployed by tagging an existing "test" image as "prod".
    PROD_PROJECT = "mem-tfrs-prod"
    PROD_SUFFIX= "production"

    // PR_NUM is the pull request number e.g. 'pr-4'
    PR_NUM = "${env.JOB_BASE_NAME}".toLowerCase()

    OPENSHIFT_NAMESPACE="openshift"

    NAME_SUFFIX="-${DEV_SUFFIX}-${PR_NUM}"
    TFRS_DB_IS_NAME="tfrs-postgresql"
    TFRS_DB_IS_BASE_NAME="tfrs-postgresql"

    TFRS_DB_SERVICE_NAME="tfrs-postgresql-${DEV_SUFFIX}-${PR_NUM}"
    TFRS_DB_NAME="tfrs"
    TFRS_DB_VOLUME_CAPACITY="1Gi"
    
    TFRS_BACKEND_IMAGE_TAG="${PR_NUM}"
    TFRS_BACKEND_DC_NAME="tfrs-backend-${DEV_SUFFIX}-${PR_NUM}"
    TFRS_BACKEND_DC_BASE_NAME="tfrs-backend-${DEV_SUFFIX}-${PR_NUM}"

    //frontend
    //the output image is TFRS_FRONTEND_ANGULAR_APP_IS_NAME:TFRS_FRONTEND_ANGULAR_APP_IS_TAG, e.g. tfrs-frontend-angular-app:pr-99
    //the output image is TFRS_FRONTEND_ANGULAR_APP_IS_NAME:TFRS_FRONTEND_ANGULAR_APP_IS_TAG, e.g. tfrs-frontend-angular-app:pr-99
    TFRS_NODEJS_IS_NAME="tfrs-nodejs"
    NODEJS_IS_FROM_NAME="nodejs"
    NODEJS_IS_FROM_VERSION="8"
    TFRS_FRONTEND_ANGULAR_APP_IS_NAME="tfrs-frontend-angular-app"
    TFRS_FRONTEND_ANGULAR_APP_IS_BASE_NAME="tfrs-frontend-angular-app"
    TFRS_FRONTEND_IS_NAME="tfrs-frontend"
    TFRS_FRONTEND_IS_BASE_NAME="tfrs-frontend"
    TFRS_FRONTEND_ANGULAR_APP_BC_NAME="tfrs-frontend-angular-app-${DEV_SUFFIX}-${PR_NUM}"
    TFRS_FRONTEND_ANGULAR_APP_BC_BASE_NAME="tfrs-frontend-angular-app"
    TFRS_FRONTEND_ANGULAR_APP_IS_TAG="${PR_NUM}"
    TFRS_FRONTEND_BC_NAME="tfrs-frontend-${DEV_SUFFIX}-${PR_NUM}"
    TFRS_FRONTEND_BC_BASE_NAME="tfrs-frontend"
    TFRS_FRONTEND_IS_TAG="${PR_NUM}"

  } //end of environment

  agent any
stages {

    // the Start Pipeline stage will process and apply OpenShift build templates which will create
    // buildconfigs and an imagestream for built images.
    // each pull request gets its own buildconfig but all new builds are pushed to a single imagestream,
    // to be tagged with the pull request number.
    // e.g.:  tfrs-backend:pr-999  and   tfrs-frontend

    stage('Backend Build and Unit Test') {
      steps {
        script {
          echo "PR_NUM=${PR_NUM}"
          echo "NAME_SUFFIX=${NAME_SUFFIX}"
          echo "Cancelling previous builds..."
          timeout(10) {
            abortAllPreviousBuildInProgress(currentBuild)
          }
          echo "Previous builds cancelled"

          openshift.withCluster() {
            openshift.withProject(TOOLS_PROJECT) {
              notifyStageStatus ("Build Backend and Run Unit Test", "PENDING")

/*****
              echo "creating tfrs frontend build config"
              //echo " \$ oc process -f openshift/backend.bc.json -p ENV_NAME=${DEV_SUFFIX} -p NAME_SUFFIX=-${DEV_SUFFIX}-${PR_NUM} -p APP_IMAGE_TAG=${PR_NUM} -p SOURCE_REPOSITORY_URL=${REPOSITORY} -p SOURCE_REPOSITORY_REF=pull/${CHANGE_ID}/head | oc apply -n mem-tfrs-tools -f -"
              def buildtemplateFrontend = openshift.process("-f",
                "openshift/frontend.bc.json",
                "NAME_SUFFIX=${NAME_SUFFIX}",
                "PR_NUM=${PR_NUM}",
                "TFRS_SOURCE_REPO_URL=${TFRS_SOURCE_REPO_URL}",
                "TFRS_SOURCE_REPO_REF=${TFRS_SOURCE_REPO_REF}"
              )
              openshift.apply(buildtemplateFrontend)
******/

              echo "Building backend and Running Unit Test"
              //echo " \$ oc process -f openshift/backend.bc.json -p ENV_NAME=${DEV_SUFFIX} -p NAME_SUFFIX=-${DEV_SUFFIX}-${PR_NUM} -p APP_IMAGE_TAG=${PR_NUM} -p SOURCE_REPOSITORY_URL=${REPOSITORY} -p SOURCE_REPOSITORY_REF=pull/${CHANGE_ID}/head | oc apply -n mem-tfrs-tools -f -"
              def buildtemplateBackend = openshift.process("-f",
                "openshift/backend.bc.json",
                "NAME_SUFFIX=${NAME_SUFFIX}",
                "PR_NUM=${PR_NUM}",
                "TFRS_SOURCE_REPO_URL=${TFRS_SOURCE_REPO_URL}",
                "TFRS_SOURCE_REPO_REF=${TFRS_SOURCE_REPO_REF}"
              )
              openshift.apply(buildtemplateBackend)
              echo "  sleep 1"
              sleep(time:120,unit:"SECONDS")
              echo "  sleep 1 woke up"
              notifyStageStatus ("Build Backend and Run Unit Test", "SUCCESS")

            }
          }
        }
      }
    }
/****
        // the Build stage runs unit tests and builds files. an image will be outputted to the app's imagestream
    // builds use the source to image strategy. See /app/.s2i/assemble for image build script
    stage('Build and Unit Test') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(TOOLS_PROJECT) {

              notifyStageStatus ("Build and Unit Test", "PENDING")

              echo "Building frontend"
              def frontendBuild = openshift.selector("bc", "tfrs-frontend${NAME_SUFFIX}")
              frontendBuild.startBuild("--wait", "--env=ENABLE_DATA_ENTRY=True").logs("-f")

              echo "Building Backend and Unit Testing"
              def backendBuild = openshift.selector("bc", "tfrs-backend${NAME_SUFFIX}")
              echo "  sleep 2"
              sleep(time:120,unit:"SECONDS")
              echo "  sleep 2 woke up"
              backendBuild.startBuild("--wait", "--env=ENABLE_DATA_ENTRY=True").logs("-f")
              
              //temporarily set ENABLE_DATA_ENTRY=True during testing because False currently leads to a failing unit test
              //echo " \$ oc start-build -n moe-gwells-tools ${APP_NAME}-${DEV_SUFFIX}-${PR_NUM} --wait --env=ENABLE_DATA_ENTRY=true --follow=true"

              notifyStageStatus ("Build and Unit Test", "SUCCESS")
            }
          }
        }
      }
    } //end of stage
***/
    stage('Remove Build Configs') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(TOOLS_PROJECT) {
              notifyStageStatus ("Remove Build Configs", "PENDING")

              echo "Deleting build configs"
              def backendBuild = openshift.selector("bc", "tfrs-backend${NAME_SUFFIX}")
              backendBuild.delete()

              notifyStageStatus ("Remove Build Configs", "SUCCESS")
            }
          }
        }
      }


    } //end of stage

  } //end of stages
} //end of pipeline
