import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "idea"
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id "com.energizedwork.idea-base" version "1.4"
}

ext {
    drivers = ["remoteEdge", "remoteFirefox", "remoteChrome"]


    ext {
        groovyVersion = '2.5.3'
        gebVersion = '3.0.1'
        seleniumVersion = '3.141.59'
        spockCoreVersion = '1.3-groovy-2.5'
        spockReportsVersion = '1.6.1'
        slf4jApiVersion = '1.7.25'
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver

        /*
         * Set environment variables from a .env file, if it exists.
         * Equals sign separated key value pairs, one per new line: SOME_KEY=some value
         * These local environment variables take precedence over any environment variables set at the system level.
         */
        def envFile = file('.env')
        if (envFile.exists()) {
            envFile.readLines().each() {
                def (key, value) = it.tokenize('=')
                if (key && value) {
                    environment key, value
                }
            }
        }
    }
}
repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    //testCompile 'com.aoe:geb-spock-reports:0.2.1'

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:$spockCoreVersion") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'


    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    //Support
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

    // Spock reports
//    testCompile( "com.athaydes:spock-reports:$spockReportsVersion" ) {
//        transitive = false // this avoids affecting your version of Groovy/Spock
//    }
    // if you don't already have slf4j-api and an implementation of it in the classpath, add this!
    testCompile "org.slf4j:slf4j-api:$slf4jApiVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jApiVersion"

//    testCompile "docgen:document-generator:1.0"
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
//    systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
//    systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.inlineCss', false
//    systemProperty 'com.athaydes.spockframework.report.projectName',"TFRS"
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

sourceSets {
    test {
        groovy {
            srcDirs = ["src/test/groovy"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}
