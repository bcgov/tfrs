name: Branch Deploy Template

on:
  workflow_call:
    inputs:
      branch-name: # sample value: release-2.9.0 or main-release-jan-2024
        required: true
        type: string
      # suffix is in format of -dev, -test, -dev-jan, test-jan, -dev-1923, dev-jan-1923
      suffix:
        required: true
        type: string   
      # env-name is in format of dev, test     
      env-name:
        required: true
        type: string   
      # database-service-host-name, sample tfrs-spilo, tfrs-spilo-jan, tfrs-spilo-dev-1988
      database-service-host-name:
        required: true
        type: string
      # this virtual host name, sample  tfrs-jan-vhost
      rabbitmq-vhost:
        required: true
        type: string           
    secrets:
      tools-namespace:
        required: true
      namespace:
        required: true
      openshift-server:
         required: true 
      openshift-token:   
         required: true       
  
jobs:

  deploy:

    name: Deploy tfrs
    runs-on: ubuntu-latest
    timeout-minutes: 60
 
    steps:

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch-name }}

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.openshift-server }}
          openshift_token: ${{ secrets.openshift-token }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.tools-namespace }}  
      
      - name: Deploy tfrs-frontend
        shell: bash {0}
        run: |
          oc tag ${{ secrets.tools-namespace }}/tfrs-frontend:build-${{ inputs.branch-name }} ${{ secrets.namespace }}/tfrs-frontend:${{ inputs.env-name }}-${{ inputs.branch-name }}
          cd charts/tfrs-apps/charts/tfrs-frontend
          helm status -n ${{ secrets.namespace }} tfrs-frontend${{ inputs.suffix }}
          if [ $? -eq 0 ]; then
            echo "tfrs-frontend${{ inputs.suffix }} release exists already"
            helm upgrade \
              --set frontendImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-frontend${{ inputs.suffix }} .
          else
            echo "tfrs-frontend${{ inputs.suffix }} release does not exist"
            helm install \
              --set frontendImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-frontend${{ inputs.suffix }} .
          fi
          
      - name: Deploy tfrs-backend
        shell: bash {0}
        run: |
          oc tag ${{ secrets.tools-namespace }}/tfrs-backend:build-${{ inputs.branch-name }} ${{ secrets.namespace }}/tfrs-backend:${{ inputs.env-name }}-${{ inputs.branch-name }}
          cd charts/tfrs-apps/charts/tfrs-backend
          helm status -n ${{ secrets.namespace }} tfrs-backend${{ inputs.suffix }}
          if [ $? -eq 0 ]; then
            echo "tfrs-backend${{ inputs.suffix }} release exists already"
            helm upgrade \
              --set backendImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-backend${{ inputs.suffix }} .
          else
            echo "tfrs-backend${{ inputs.suffix }} release does not exist"
            helm install \
              --set backendImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-backend${{ inputs.suffix }} .
          fi
          
      - name: Deploy tfrs-celery
        shell: bash {0}
        run: |
          oc tag ${{ secrets.tools-namespace }}/tfrs-celery:build-${{ inputs.branch-name }} ${{ secrets.namespace }}/tfrs-celery:${{ inputs.env-name }}-${{ inputs.branch-name }}
          cd charts/tfrs-apps/charts/tfrs-celery
          helm status -n ${{ secrets.namespace }} tfrs-celery${{ inputs.suffix }}
          if [ $? -eq 0 ]; then
            echo "tfrs-celery${{ inputs.suffix }} release exists already"
            helm upgrade \
              --set celeryImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-celery${{ inputs.suffix }} .
          else
            echo "tfrs-celery${{ inputs.suffix }} release does not exist"
            helm install \
              --set celeryImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-celery${{ inputs.suffix }} .
          fi

      - name: Deploy tfrs-scan-handler
        shell: bash {0}
        run: |
          oc tag ${{ secrets.tools-namespace }}/tfrs-scan-handler:build-${{ inputs.branch-name }} ${{ secrets.namespace }}/tfrs-scan-handler:${{ inputs.env-name }}-${{ inputs.branch-name }}
          cd charts/tfrs-apps/charts/tfrs-scan-handler
          helm status -n ${{ secrets.namespace }} tfrs-scan-handler${{ inputs.suffix }}
          if [ $? -eq 0 ]; then
            echo "tfrs-scan-handler${{ inputs.suffix }} release exists already"
            helm upgrade \
              --set scanHandlerImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-scan-handler${{ inputs.suffix }} .
          else
            echo "tfrs-scan-handler${{ inputs.suffix }} release does not exist"
            helm install \
              --set scanHandlerImageTagName=${{ inputs.env-name }}-${{ inputs.branch-name }} \
              --set suffix=${{ inputs.suffix }} \
              --set namespace=${{ secrets.namespace }} \
              --set envName=${{ inputs.env-Name }} \
              --set databaseServiceHostName=${{ inputs.database-service-host-name }} \
              --set rabbitmqVHost=${{ inputs.rabbitmq-vhost }} \
              -n ${{ secrets.namespace }} -f ./values${{ inputs.suffix }}.yaml tfrs-scan-handler${{ inputs.suffix }} .
          fi