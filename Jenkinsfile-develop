result = 0
runParallel = true
IMAGE_HASH_FRONTEND = 'nonexist123'
IMAGE_HASH_NOTIFICATION = 'nonexist123'
IMAGE_HASH_BACKEND = 'nonexist123'
IMAGE_HASH_SCAN_COORDINATOR = 'nonexist123'
IMAGE_HASH_SCAN_HANDLER = 'nonexist123'
IMAGE_HASH_CELERY = 'nonexist123'

def prepareBackendBuildStages() {
    def buildBackendList = []
    def buildBackendStages = [:]
    buildBackendStages.put('Build Backend', prepareBuildBackend())
    buildBackendStages.put('Build Scan Coordinator', prepareBuildScanCoordinator())
    buildBackendStages.put('Build ScanHandler', prepareBuildScanHandler())
    buildBackendStages.put('Build Celery', prepareBuildCelery())
    buildBackendList.add(buildBackendStages)
    return buildBackendList
}

def prepareFrontendBuildStages() {
    def buildFrontendList = []
    def buildFrontendStages = [:]
    buildFrontendStages.put('Build Frontend', prepareBuildFrontend())
    buildFrontendStages.put('Build Notification Server', prepareBuildNotificationServer())
    buildFrontendList.add(buildFrontendStages)
    return buildFrontendList
}

def prepareBuildBackend() {
  return {
    stage('Build-Backend') {
        openshiftBuild bldCfg: 'tfrs-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_BACKEND = sh (
            script: 'oc get istag tfrs-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                returnStdout: true).trim()
        echo ">> IMAGE_HASH_BACKEND: $IMAGE_HASH_BACKEND"
    }
  }
}

def prepareBuildScanCoordinator() {
  return {
    stage('Build-Scan-Coordinator') {
        openshiftBuild bldCfg: 'scan-coordinator-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_COORDINATOR = sh (
            script: 'oc get istag scan-coordinator-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_COORDINATOR: $IMAGE_HASH_SCAN_COORDINATOR"
    }
  }
}

def prepareBuildScanHandler() {
  return {
    stage('Build-Scan-Handler') {
        openshiftBuild bldCfg: 'scan-handler-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_SCAN_HANDLER = sh (
            script: 'oc get istag scan-handler-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                returnStdout: true).trim()
        echo ">> IMAGE_HASH_SCAN_HANDLER: $IMAGE_HASH_SCAN_HANDLER"
    }
  }
}

def prepareBuildCelery() {
  return {
    stage('Build-Celery') {
        openshiftBuild bldCfg: 'celery-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_CELERY = sh (
            script: 'oc get istag celery-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                returnStdout: true).trim()
        echo ">> IMAGE_HASH_CELERY: $IMAGE_HASH_CELERY"
    }
  }
}

def prepareBuildFrontend() {
    return {
        stage('Build Frontend') {
            echo "Building Frontend..."
            timeout(30) {
                openshiftBuild bldCfg: 'client-develop-angular-app-build', showBuildLogs: 'true'
            }
            openshiftBuild bldCfg: 'client-develop', showBuildLogs: 'true'
            echo ">> Getting Image Hash for frontend"
            IMAGE_HASH_FRONTEND = sh (
                script: 'oc get istag client-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                    returnStdout: true).trim()
            echo ">> IMAGE_HASH_FRONTEND: $IMAGE_HASH_FRONTEND"
        }
    }
}

def prepareBuildNotificationServer() {
    return {
        stage('Build Notification Server') {
            echo "Building Notification Server ..."
            timeout(30) {
                openshiftBuild bldCfg: 'notification-server-develop', showBuildLogs: 'true'
            }
            echo ">> Getting Image Hash for notification server"
            IMAGE_HASH_NOTIFICATION = sh (
                script: 'oc get istag notification-server-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                    returnStdout: true).trim()
            echo ">> IMAGE_HASH_NOTIFICATION: $IMAGE_HASH_NOTIFICATION"
        }
    }
}

podTemplate(label: "develop-backend-python-${env.BUILD_NUMBER}", name: "develop-backend-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
){
    
    node("develop-backend-python-${env.BUILD_NUMBER}") {
        stage('Unit Test') {
            checkout scm
            dir('backend') {
                try {
                    sh 'pip install --upgrade pip && pip install -r requirements.txt'
                    sh 'python manage.py collectstatic && python manage.py migrate'
                    sh 'python manage.py test -c nose.cfg'
                } catch(Throwable t) {
                    result = 1;
                } finally {
                    //stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                    junit 'nosetests.xml'
                }
            }
        }

    } //end node
} //end podTemplate

echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}

//organize all build stages
backendBuildStages = prepareBackendBuildStages()
frontendBuildStages = prepareFrontendBuildStages()

podTemplate(label: "develop-maven-${env.BUILD_NUMBER}", name: "develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {

node("develop-maven-${env.BUILD_NUMBER}") {
/****
    stage('Code Quality Check') {
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_URL: ${SONARQUBE_URL}"
        dir('frontend/sonar-runner') {
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
        dir('backend/sonar-runner') {
            unstash 'coverage'
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
    }
****/

    //run frontend builds
    for (builds in frontendBuildStages) {
        if (runParallel) {
            parallel(builds)
        } else {
            // run serially (nb. Map is unordered! )
            for (build in builds.values()) {
                build.call()
            }
        }
    }

    //run backend builds
    for (builds in backendBuildStages) {
        if (runParallel) {
            parallel(builds)
        } else {
            // run serially (nb. Map is unordered! )
            for (build in builds.values()) {
                build.call()
            }
        }
    }

    stage('Bring up Maintenance Page') {
        sh returnStatus: true, script: "oc scale dc maintenance-page -n mem-tfrs-dev --replicas=1 --timeout=20s"
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-frontend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-backend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"maintenance-page\"}, \"port\":{\"targetPort\":\"2015-tcp\"}}}'"
    }

    stage('Datebase Backup') {
        postgresql_pod_name=sh (script: 'oc get pods -n mem-tfrs-dev | grep postgresql96 | awk \'{print $1}\'', returnStdout: true).trim()
        echo "start backup script tfrsdump-dev.sh on dev, postgresql_pod_name is ${postgresql_pod_name}"
        sh returnStdout: true, script: "oc exec ${postgresql_pod_name} -c postgresql96 -n mem-tfrs-dev -- bash /postgresql-backup/tfrs-backup.sh master dev"
        echo 'backup script completed'
    }

    stage('Deploy Frontend on Dev') {
        openshiftTag destStream: 'client-develop', verbose: 'true', destTag: 'dev', srcStream: 'client-develop', srcTag: "${IMAGE_HASH_FRONTEND}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
        openshiftTag destStream: 'notification-server-develop', verbose: 'true', destTag: 'dev', srcStream: 'notification-server-develop', srcTag: "${IMAGE_HASH_NOTIFICATION}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'notification-server', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
    }

    stage('Deploy Backend on Dev') {
        openshiftTag destStream: 'tfrs-develop', verbose: 'true', destTag: 'dev', srcStream: 'tfrs-develop', srcTag: "${IMAGE_HASH_BACKEND}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
        openshiftTag destStream: 'scan-coordinator-develop', verbose: 'true', destTag: 'dev', srcStream: 'scan-coordinator-develop', srcTag: "${IMAGE_HASH_SCAN_COORDINATOR}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'scan-coordinator', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
        openshiftTag destStream: 'scan-handler-develop', verbose: 'true', destTag: 'dev', srcStream: 'scan-handler-develop', srcTag: "${IMAGE_HASH_SCAN_HANDLER}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'scan-handler', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
        openshiftTag destStream: 'celery-develop', verbose: 'true', destTag: 'dev', srcStream: 'celery-develop', srcTag: "${IMAGE_HASH_CELERY}"
        sh 'sleep 5s'
        openshiftVerifyDeployment depCfg: 'celery', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', waitTime: '10', waitUnit: 'min'
    }

    stage('Refresh SchemaSpy') {
        echo "Refreshing SchemaSpy for Dev Database"
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-dev', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        openshiftScale depCfg: 'schema-spy-public', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true', waitTime: '10', waitUnit: 'min'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-dev', replicaCount: 0, verbose: 'false', verifyReplicaCount: 'true'
        openshiftScale depCfg: 'schema-spy-audit', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'true', waitTime: '10', waitUnit: 'min'
    }    

    stage('Take down Maintenance Page') {
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-backend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"backend\"}, \"port\":{\"targetPort\":\"web\"}}}'"
        sh returnStatus: true, script: "oc patch route/dev-lowcarbonfuels-frontend -n mem-tfrs-dev -p '{\"spec\":{\"to\":{\"name\":\"client\"}, \"port\":{\"targetPort\":\"web\"}}}'"
        sh returnStatus: true, script: "oc scale dc maintenance-page -n mem-tfrs-dev --replicas=0 --timeout=20s"
    }


} //endo of node
} //end of podTemplate
