podTemplate(label: "develop-maven-${env.BUILD_NUMBER}", name: "develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins-basic', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
) {

/***
    node("develop-maven-${env.BUILD_NUMBER}") {
        stage('Build-Celery') {
            checkout scm
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-tools") {
                        def celeryJson = openshift.process(readFile(file:'openshift/templates/components/celery/celery-bc.json'), "-p", "TFRS_RELEASE_TAG=v1.4.1", "CELERY_IS_NAME=celery-develop")
                        def celeryBuild = openshift.apply(celeryJson)
                        def celeryBuildSelector = openshift.selector("bc", "celery-develop")
                        celeryBuildSelector.startBuild("--wait")
                    } //end of openshift.withProject
                } //end of script
            } //end of timeout

        }
    }


    node("develop-maven-${env.BUILD_NUMBER}") {
        stage('Build-Frontend') {
            checkout scm
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-tools") {
                        def clientAngularJson = openshift.process(readFile(file:'openshift/templates/components/frontend/client-angular-app-build-bc.json'), "-p", "TFRS_RELEASE_TAG=v1.4.1", "CLIENT_ANGULAR_APP_IS_NAME=client-develop-angular-app")
                        def clientAngularBuild = openshift.apply(clientAngularJson)
                        def clientAngularBuildSelector = openshift.selector("bc", "client-develop-angular-app")
                        clientAngularBuildSelector.startBuild("--wait")
                        def clientJson = openshift.process(readFile(file:'openshift/templates/components/frontend/client-bc.json'), "-p", "CLIENT_IS_NAME=client-develop", "CLIENT_ANGULAR_APP_IS_NAME=client-develop-angular-app")
                        def clientBuild = openshift.apply(clientJson)
                        def clientBuildSelector = openshift.selector("bc", "client-develop")
                        clientBuildSelector.startBuild("--wait")
                    } //end of openshift.withProject
                } //end of script
            } //end of timeout

        }
    }
***/
    node("develop-maven-${env.BUILD_NUMBER}") {
        stage('Build-Notification-Server') {
            checkout scm
            timeout(30) {
                script {
                    openshift.withProject("mem-tfrs-tools") {
                        def notificationJson = openshift.process(readFile(file:'openshift/templates/components/notification/notification-server-bc.json'), "-p", "TFRS_RELEASE_TAG=v1.4.1", "NOTIFICATION_SERVER_IS_NAME=notification-server-develop")
                        def notificationBuild = openshift.apply(notificationJson)
                        def notificationSelector = openshift.selector("bc", "notification-server-develop")
                        notificationSelector.startBuild("--wait")
                    } //end of openshift.withProject
                } //end of script
            } //end of timeout

        }
    }
}
