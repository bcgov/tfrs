
podTemplate(label: "master-frontend-maven-${env.BUILD_NUMBER}", name: "master-frontend-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
    containers: [
        containerTemplate(
            name: 'jnlp',
            image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '2Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ]
) {
node("master-frontend-maven-${env.BUILD_NUMBER}") {
	
    stage('Build Frontend') {
        echo "Building Frontend..."
	    openshiftBuild bldCfg: 'client-angular-app-build', showBuildLogs: 'true'
        openshiftBuild bldCfg: 'client', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_FRONTEND = sh (
            script: 'oc get istag client:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_FRONTEND: $IMAGE_HASH_FRONTEND"
    }
    stage('Build Notification') {
        echo "Building Notification Server ..."
	    openshiftBuild bldCfg: 'notification-server', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH_NOTIFICATION = sh (
            script: 'oc get istag notification-server:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH_NOTIFICATION: $IMAGE_HASH_NOTIFICATION"
    }

    stage('Deploy on Test') {
	    input "Deploy to Test?"
        echo "Deploying to Test..."
        openshiftTag destStream: 'client', verbose: 'true', destTag: 'test', srcStream: 'client', srcTag: "${IMAGE_HASH_FRONTEND}"
        sh 'sleep 10s'
        openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'notification-server', verbose: 'true', destTag: 'test', srcStream: 'notification-server', srcTag: "${IMAGE_HASH_NOTIFICATION}"
        sh 'sleep 10s'
        openshiftVerifyDeployment depCfg: 'notification-server', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
    }
	
    stage('Deploy on Prod') {
	    input "Deploy to Prod?"
        input "Deploy to Prod? Please confirm again."
        input "Deploy to Prod? This is the last confirmation required."
        echo "Deploying to Prod..."
        openshiftTag destStream: 'client', verbose: 'true', destTag: 'prod', srcStream: 'client', srcTag: "${IMAGE_HASH_FRONTEND}"
        sh 'sleep 10s'
        openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
        openshiftTag destStream: 'notification-server', verbose: 'true', destTag: 'prod', srcStream: 'notification-server', srcTag: "${IMAGE_HASH_NOTIFICATION}"
        sh 'sleep 10s'
        openshiftVerifyDeployment depCfg: 'notification-server', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
        input "Reminder of deactivating of maintenance page"
    }	
} //end of node

} //end of podTemplate

